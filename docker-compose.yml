# docker-compose.yml - MatchIt Completo
version: '3.8'

services:
  # Base de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: matchit_db
      POSTGRES_USER: matchit
      POSTGRES_PASSWORD: matchit123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/Banco de dados/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - matchit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matchit -d matchit_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Cache Redis
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - matchit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: matchit_db
      DB_USER: matchit
      DB_PASSWORD: matchit123
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-matchit_secret_key_production_2024}
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "3000:3000"
    networks:
      - matchit-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Nginx Proxy (Produção)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - matchit-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Configuração para desenvolvimento
  dev-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: build
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: matchit_db
      DB_USER: matchit
      DB_PASSWORD: matchit123
      REDIS_URL: redis://redis:6379
      JWT_SECRET: matchit_secret_key_dev
    ports:
      - "3001:3000"
    networks:
      - matchit-network
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  matchit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
