# Dockerfile para o backend Node.js
FROM node:18-bullseye-slim AS base

# Instalar dependências do sistema
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    python3 \
    python3-pip \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copiar arquivos de dependências
COPY package*.json ./

# Instalar dependências
RUN npm ci --only=production && npm cache clean --force

# Copiar requirements para Python (se necessário)
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copiar código fonte
COPY server.js ./
COPY scripts/ ./scripts/
COPY middleware/ ./middleware/
COPY config/ ./config/
COPY .env* ./

# Copiar script de entrada
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Criar usuário não-root para segurança
RUN groupadd -g 1001 nodejs && \
    useradd -u 1001 -g nodejs nodejs

# Definir permissões
RUN chown -R nodejs:nodejs /app
USER nodejs

# Variáveis de ambiente
ENV NODE_ENV=production
ENV DB_HOST=postgres
ENV DB_PORT=5432
ENV DB_USER=matchit
ENV DB_PASSWORD=matchit123
ENV DB_NAME=matchit_db
ENV PORT=3000

# Expor porta
EXPOSE 3000

# Health check aprimorado
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Comando para iniciar a aplicação - CORRIGIDO
CMD ["node", "server.js"]