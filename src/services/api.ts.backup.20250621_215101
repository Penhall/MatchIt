// src/services/api.ts - Configura√ß√£o corrigida para Vite
import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

// ‚úÖ CORRE√á√ÉO: Usar import.meta.env em vez de process.env para Vite
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';

console.log('üîß API Base URL configurada:', API_BASE_URL);

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // 30 segundos
  headers: {
    'Content-Type': 'application/json'
  }
});

// Request interceptor para injetar token
api.interceptors.request.use(
  (config: AxiosRequestConfig) => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers = config.headers || {};
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // Log para debug
    console.log('üöÄ API Request:', config.method?.toUpperCase(), config.url);
    
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor para tratamento de erros
api.interceptors.response.use(
  (response: AxiosResponse) => {
    // Log para debug
    console.log('‚úÖ API Response:', response.status, response.config.url);
    return response;
  },
  (error: AxiosError) => {
    // Log detalhado do erro
    console.error('‚ùå API Error:', {
      status: error.response?.status,
      url: error.config?.url,
      message: error.message,
      data: error.response?.data
    });
    
    // Tratamento espec√≠fico para 401
    if (error.response?.status === 401) {
      console.warn('üîê Token expirado - removendo e redirecionando');
      localStorage.removeItem('auth_token');
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

// Interface para respostas padronizadas
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: {
    message: string;
    code?: string;
  };
}

// Fun√ß√µes auxiliares com tipagem melhorada
const apiService = {
  get: <T>(endpoint: string) => api.get<T>(endpoint),
  post: <T>(endpoint: string, body: any) => api.post<T>(endpoint, body),
  put: <T>(endpoint: string, body: any) => api.put<T>(endpoint, body),
  delete: <T>(endpoint: string) => api.delete<T>(endpoint),
  
  // M√©todo para upload de arquivos
  upload: (endpoint: string, formData: FormData) => {
    return api.post(endpoint, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  },
};

export default apiService;
export { API_BASE_URL };
export type { ApiResponse };