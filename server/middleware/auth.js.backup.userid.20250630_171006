// server/middleware/auth.js - Middleware com debug melhorado para JWT malformed
import jwt from 'jsonwebtoken';
import { pool } from '../config/database.js';

const JWT_SECRET = process.env.JWT_SECRET || 'matchit-secret-development-2025';

/**
 * Middleware de autentica√ß√£o com debug melhorado
 */
export const authenticateToken = async (req, res, next) => {
    try {
        console.log('üîç [AUTH DEBUG] Iniciando valida√ß√£o de token...');
        
        // Extrair token do header Authorization
        const authHeader = req.headers.authorization;
        console.log('üîç [AUTH DEBUG] Header Authorization:', authHeader ? `"${authHeader}"` : 'undefined');
        
        if (!authHeader) {
            console.log('‚ùå [AUTH DEBUG] Header Authorization n√£o encontrado');
            return res.status(401).json({
                success: false,
                error: 'Token de acesso obrigat√≥rio',
                code: 'MISSING_TOKEN'
            });
        }
        
        // Verificar formato do token (Bearer <token>)
        if (!authHeader.startsWith('Bearer ')) {
            console.log('‚ùå [AUTH DEBUG] Formato inv√°lido, header:', authHeader);
            return res.status(401).json({
                success: false,
                error: 'Formato de token inv√°lido. Use: Bearer <token>',
                code: 'INVALID_TOKEN_FORMAT'
            });
        }
        
        // Extrair token removendo "Bearer "
        const token = authHeader.substring(7).trim(); // Trim para remover espa√ßos extras
        console.log('üîç [AUTH DEBUG] Token extra√≠do:', `"${token}"`);
        console.log('üîç [AUTH DEBUG] Token length:', token.length);
        console.log('üîç [AUTH DEBUG] Token in√≠cio:', token.substring(0, 20) + '...');
        console.log('üîç [AUTH DEBUG] Token fim:', '...' + token.substring(token.length - 20));
        
        // Verificar se token n√£o est√° vazio
        if (!token || token === 'undefined' || token === 'null') {
            console.log('‚ùå [AUTH DEBUG] Token vazio ou inv√°lido');
            return res.status(401).json({
                success: false,
                error: 'Token vazio',
                code: 'EMPTY_TOKEN'
            });
        }
        
        // Para desenvolvimento, aceitar token "test-token"
        if (process.env.NODE_ENV === 'development' && token === 'test-token') {
            console.log('‚úÖ [AUTH DEBUG] Token de desenvolvimento aceito');
            req.user = {
                id: 1,
                userId: 1,
                name: 'Usu√°rio Teste',
                email: 'teste@matchit.com',
                isTestUser: true
            };
            return next();
        }
        
        // Verificar se o token tem formato JWT b√°sico (3 partes separadas por ponto)
        const tokenParts = token.split('.');
        console.log('üîç [AUTH DEBUG] Partes do token:', tokenParts.length);
        
        if (tokenParts.length !== 3) {
            console.log('‚ùå [AUTH DEBUG] Token n√£o tem 3 partes. Partes encontradas:', tokenParts.length);
            console.log('üîç [AUTH DEBUG] Partes:', tokenParts.map((part, i) => `${i}: ${part.substring(0, 10)}...`));
            return res.status(401).json({
                success: false,
                error: 'Token JWT malformado - partes incorretas',
                code: 'MALFORMED_TOKEN_PARTS'
            });
        }
        
        // Verificar JWT_SECRET
        console.log('üîç [AUTH DEBUG] JWT_SECRET:', JWT_SECRET);
        
        // Verificar e decodificar JWT
        let decoded;
        try {
            console.log('üîç [AUTH DEBUG] Tentando verificar JWT...');
            decoded = jwt.verify(token, JWT_SECRET);
            console.log('‚úÖ [AUTH DEBUG] JWT verificado com sucesso');
            console.log('üîç [AUTH DEBUG] Payload decodificado:', JSON.stringify(decoded, null, 2));
        } catch (jwtError) {
            console.error('‚ùå [AUTH DEBUG] Erro JWT detalhado:', {
                name: jwtError.name,
                message: jwtError.message,
                stack: jwtError.stack
            });
            
            if (jwtError.name === 'TokenExpiredError') {
                return res.status(401).json({
                    success: false,
                    error: 'Token expirado',
                    code: 'TOKEN_EXPIRED'
                });
            } else if (jwtError.name === 'JsonWebTokenError') {
                return res.status(401).json({
                    success: false,
                    error: 'Token inv√°lido: ' + jwtError.message,
                    code: 'INVALID_TOKEN'
                });
            } else {
                return res.status(401).json({
                    success: false,
                    error: 'Falha na valida√ß√£o do token: ' + jwtError.message,
                    code: 'TOKEN_VALIDATION_FAILED'
                });
            }
        }
        
        // Verificar se temos userId no payload
        if (!decoded.userId) {
            console.log('‚ùå [AUTH DEBUG] userId n√£o encontrado no payload');
            return res.status(401).json({
                success: false,
                error: 'Token inv√°lido - userId ausente',
                code: 'MISSING_USERID'
            });
        }
        
        console.log('üîç [AUTH DEBUG] userId do token:', decoded.userId);
        
        // Buscar usu√°rio no banco de dados
        console.log('üîç [AUTH DEBUG] Buscando usu√°rio no banco...');
        const userResult = await pool.query(
            'SELECT id, name, email, is_active FROM users WHERE id = $1',
            [decoded.userId]
        );
        
        if (userResult.rows.length === 0) {
            console.log('‚ùå [AUTH DEBUG] Usu√°rio n√£o encontrado no banco');
            return res.status(401).json({
                success: false,
                error: 'Usu√°rio n√£o encontrado',
                code: 'USER_NOT_FOUND'
            });
        }
        
        const user = userResult.rows[0];
        console.log('‚úÖ [AUTH DEBUG] Usu√°rio encontrado:', user.email);
        
        // Verificar se usu√°rio est√° ativo
        if (!user.is_active) {
            console.log('‚ùå [AUTH DEBUG] Usu√°rio inativo');
            return res.status(401).json({
                success: false,
                error: 'Conta desativada',
                code: 'ACCOUNT_DISABLED'
            });
        }
        
        // Adicionar informa√ß√µes do usu√°rio √† requisi√ß√£o
        req.user = {
            id: user.id,
            userId: user.id, // Para compatibilidade
            name: user.name,
            email: user.email,
            isActive: user.is_active,
            tokenData: decoded
        };
        
        console.log('‚úÖ [AUTH DEBUG] Token validado com sucesso para:', user.email);
        next();
        
    } catch (error) {
        console.error('‚ùå [AUTH DEBUG] Erro geral no middleware:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno de autentica√ß√£o',
            code: 'AUTH_INTERNAL_ERROR',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
};

/**
 * Middleware de autentica√ß√£o opcional
 */
export const optionalAuth = async (req, res, next) => {
    try {
        const authHeader = req.headers.authorization;
        
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            req.user = null;
            return next();
        }
        
        await authenticateToken(req, res, next);
        
    } catch (error) {
        req.user = null;
        next();
    }
};

export default authenticateToken;
