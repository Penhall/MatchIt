// server/routes/profile.js - Rotas de Perfil com PostgreSQL
const express = require('express');
const { body, validationResult } = require('express-validator');
const router = express.Router();

// Importar configuração de banco
let db;
try {
  const database = require('../config/database');
  db = database;
  console.log('✅ Configuração de banco carregada em profile routes');
} catch (error) {
  console.error('❌ Erro ao carregar configuração de banco:', error);
  process.exit(1);
}

// Importar middleware de autenticação
let authenticateToken;
try {
  const authMiddleware = require('../middleware/auth');
  authenticateToken = authMiddleware.authenticateToken;
  console.log('✅ Middleware de autenticação carregado');
} catch (error) {
  console.warn('⚠️ Middleware de autenticação não encontrado, usando fallback');
  authenticateToken = (req, res, next) => {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({
        success: false,
        error: 'Token não fornecido',
        code: 'NO_TOKEN'
      });
    }
    // Mock simples para desenvolvimento
    req.user = { 
      userId: 'test-user-123', 
      id: 'test-user-123',
      email: 'teste@matchit.com' 
    };
    next();
  };
}

/**
 * GET /api/profile
 */
router.get('/', authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.userId || req.user?.id;
    console.log('📥 GET /api/profile - userId:', userId);
    
    // Buscar perfil do usuário
    const result = await db.query(
      `SELECT u.id, u.name, u.email, up.bio, up.location, up.preferences
       FROM users u
       LEFT JOIN user_profiles up ON u.id = up.user_id
       WHERE u.id = $1`,
      [userId]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Usuário não encontrado',
        code: 'USER_NOT_FOUND'
      });
    }
    
    const user = result.rows[0];
    
    res.json({
      success: true,
      data: {
        id: user.id,
        name: user.name,
        email: user.email,
        bio: user.bio,
        location: user.location,
        preferences: user.preferences || {},
        profileCompletion: 75
      }
    });
    
  } catch (error) {
    console.error('❌ Erro em GET /api/profile:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

/**
 * GET /api/profile/style-preferences
 */
router.get('/style-preferences', authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.userId || req.user?.id;
    console.log('📥 GET /api/profile/style-preferences - userId:', userId);
    
    const result = await db.query(
      `SELECT category, question_id, selected_option, created_at, updated_at 
       FROM style_preferences 
       WHERE user_id = $1 
       ORDER BY category, question_id`,
      [userId]
    );
    
    // Organizar por categoria
    const preferences = {};
    result.rows.forEach(row => {
      if (!preferences[row.category]) {
        preferences[row.category] = {};
      }
      preferences[row.category][row.question_id] = {
        selectedOption: row.selected_option,
        createdAt: row.created_at,
        updatedAt: row.updated_at
      };
    });
    
    res.json({
      success: true,
      data: {
        userId,
        preferences,
        totalCategories: Object.keys(preferences).length,
        totalPreferences: result.rows.length,
        lastUpdated: result.rows.length > 0 ? Math.max(...result.rows.map(r => new Date(r.updated_at))) : null
      }
    });
    
  } catch (error) {
    console.error('❌ Erro em GET /api/profile/style-preferences:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao buscar preferências de estilo',
      code: 'FETCH_ERROR'
    });
  }
});

/**
 * PUT /api/profile/style-preferences
 */
router.put('/style-preferences', authenticateToken, [
  body('category').notEmpty().withMessage('Categoria é obrigatória'),
  body('questionId').notEmpty().withMessage('ID da questão é obrigatório'),
  body('selectedOption').notEmpty().withMessage('Opção selecionada é obrigatória')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Dados inválidos',
        code: 'VALIDATION_ERROR',
        details: errors.array()
      });
    }
    
    const userId = req.user?.userId || req.user?.id;
    const { category, questionId, selectedOption } = req.body;
    
    console.log('📥 PUT /api/profile/style-preferences:', {
      userId, category, questionId, selectedOption
    });
    
    const result = await db.query(
      `INSERT INTO style_preferences (user_id, category, question_id, selected_option, updated_at)
       VALUES ($1, $2, $3, $4, NOW())
       ON CONFLICT (user_id, category, question_id)
       DO UPDATE SET 
         selected_option = EXCLUDED.selected_option,
         updated_at = NOW()
       RETURNING *`,
      [userId, category, questionId, selectedOption]
    );
    
    res.json({
      success: true,
      message: 'Preferência de estilo atualizada com sucesso',
      data: {
        id: result.rows[0].id,
        category,
        questionId,
        selectedOption,
        updatedAt: result.rows[0].updated_at
      }
    });
    
  } catch (error) {
    console.error('❌ Erro em PUT /api/profile/style-preferences:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao atualizar preferência de estilo',
      code: 'UPDATE_ERROR',
      details: error.message
    });
  }
});

/**
 * PATCH /api/profile/style-preferences/:category
 */
router.patch('/style-preferences/:category', authenticateToken, [
  body('questionId').notEmpty().withMessage('ID da questão é obrigatório'),
  body('selectedOption').notEmpty().withMessage('Opção selecionada é obrigatória')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Dados inválidos',
        code: 'VALIDATION_ERROR',
        details: errors.array()
      });
    }
    
    const userId = req.user?.userId || req.user?.id;
    const { category } = req.params;
    const { questionId, selectedOption } = req.body;
    
    console.log('📥 PATCH /api/profile/style-preferences/:category:', {
      userId, category, questionId, selectedOption
    });
    
    const result = await db.query(
      `INSERT INTO style_preferences (user_id, category, question_id, selected_option, updated_at)
       VALUES ($1, $2, $3, $4, NOW())
       ON CONFLICT (user_id, category, question_id)
       DO UPDATE SET 
         selected_option = EXCLUDED.selected_option,
         updated_at = NOW()
       RETURNING *`,
      [userId, category, questionId, selectedOption]
    );
    
    res.json({
      success: true,
      message: `Preferência da categoria ${category} atualizada com sucesso`,
      data: {
        id: result.rows[0].id,
        category,
        questionId,
        selectedOption,
        updatedAt: result.rows[0].updated_at
      }
    });
    
  } catch (error) {
    console.error('❌ Erro em PATCH /api/profile/style-preferences/:category:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao atualizar categoria de estilo',
      code: 'UPDATE_CATEGORY_ERROR',
      details: error.message
    });
  }
});

/**
 * DELETE /api/profile/style-preferences
 */
router.delete('/style-preferences', authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.userId || req.user?.id;
    console.log('📥 DELETE /api/profile/style-preferences - userId:', userId);
    
    const result = await db.query(
      'DELETE FROM style_preferences WHERE user_id = $1',
      [userId]
    );
    
    res.json({
      success: true,
      message: 'Todas as preferências de estilo foram removidas',
      data: {
        deletedCount: result.rowCount || 0
      }
    });
    
  } catch (error) {
    console.error('❌ Erro em DELETE /api/profile/style-preferences:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao remover preferências de estilo',
      code: 'DELETE_ERROR',
      details: error.message
    });
  }
});

module.exports = router;
