// server/config/database.js - Configuração do banco (ES Modules)
import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

dotenv.config();

// Configurações do pool de conexões
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'matchit_db',
  user: process.env.DB_USER || 'matchit',
  password: process.env.DB_PASSWORD || 'matchit123',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Event listeners
pool.on('connect', () => {
  console.log('🔗 Nova conexão com banco estabelecida');
});

pool.on('error', (err) => {
  console.error('❌ Erro no cliente do banco:', err);
  process.exit(-1);
});

// Função para testar conexão
export const testConnection = async () => {
  try {
    const start = Date.now();
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as current_time, version() as db_version');
    const duration = Date.now() - start;
    
    console.log('✅ Conexão com banco bem-sucedida:', {
      database: process.env.DB_NAME || 'matchit_db',
      user: process.env.DB_USER || 'matchit',
      host: process.env.DB_HOST || 'localhost',
      duration: `${duration}ms`,
      server_time: result.rows[0].current_time
    });
    
    client.release();
    return true;
  } catch (error) {
    console.error('❌ Falha na conexão:', {
      error: error.message,
      code: error.code,
      host: process.env.DB_HOST || 'localhost',
      database: process.env.DB_NAME || 'matchit_db',
      user: process.env.DB_USER || 'matchit'
    });
    return false;
  }
};

// Função para executar queries
export const query = async (text, params) => {
  const start = Date.now();
  try {
    const result = await pool.query(text, params);
    const duration = Date.now() - start;
    
    if (process.env.NODE_ENV === 'development' || duration > 100) {
      console.log('🔍 Query executada:', {
        text: text.length > 100 ? text.substring(0, 100) + '...' : text,
        duration: `${duration}ms`,
        rows: result.rows.length
      });
    }
    
    return result;
  } catch (error) {
    const duration = Date.now() - start;
    console.error('❌ Erro na query:', {
      error: error.message,
      text: text.substring(0, 100),
      duration: `${duration}ms`
    });
    throw error;
  }
};

// Função para transações
export const transaction = async (callback) => {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const result = await callback(client);
    await client.query('COMMIT');
    return result;
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('❌ Erro na transação:', error.message);
    throw error;
  } finally {
    client.release();
  }
};

// Função para criar tabelas essenciais
export const ensureRequiredTables = async () => {
  try {
    // Tabela users
    await query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
    `);
    
    // Tabela style_choices
    await query(`
      CREATE TABLE IF NOT EXISTS style_choices (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        category VARCHAR(50) NOT NULL,
        question_id VARCHAR(100) NOT NULL,
        selected_option VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        UNIQUE(user_id, category, question_id)
      );
    `);
    
    // Índices
    await query(`
      CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
      CREATE INDEX IF NOT EXISTS idx_style_choices_user_id ON style_choices(user_id);
    `);
    
    console.log('✅ Tabelas essenciais verificadas/criadas');
    return true;
  } catch (error) {
    console.error('❌ Erro ao criar tabelas:', error.message);
    return false;
  }
};

// Inicialização
export const init = async () => {
  console.log('🔄 Inicializando conexão com banco...');
  console.log('📋 Configurações:', {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'matchit_db',
    user: process.env.DB_USER || 'matchit'
  });
  
  const connected = await testConnection();
  if (connected) {
    await ensureRequiredTables();
    console.log('🚀 Sistema de banco pronto!');
  }
  
  return connected;
};

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('🔄 Encerrando pool de conexões...');
  pool.end(() => {
    console.log('✅ Pool encerrado');
    process.exit(0);
  });
});

export { pool };
export default { pool, query, transaction, testConnection, ensureRequiredTables, init };
