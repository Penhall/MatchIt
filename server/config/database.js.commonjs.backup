// server/config/database.js - Configura√ß√£o do PostgreSQL corrigida
require('dotenv').config();
const { Pool } = require('pg');

// Configura√ß√µes do banco de dados
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT) || 5432,
  database: process.env.DB_NAME || 'matchit_db',
  user: process.env.DB_USER || 'matchit',
  password: process.env.DB_PASSWORD || 'matchit123',
  max: 20, // m√°ximo de conex√µes no pool
  idleTimeoutMillis: 30000, // tempo limite para conex√µes ociosas
  connectionTimeoutMillis: 5000, // tempo limite para conectar
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
};

console.log('üóÑÔ∏è Configura√ß√£o do banco:', {
  host: dbConfig.host,
  port: dbConfig.port,
  database: dbConfig.database,
  user: dbConfig.user,
  password: '***', // n√£o mostrar senha nos logs
  ssl: dbConfig.ssl
});

// Criar pool de conex√µes
const pool = new Pool(dbConfig);

// Event listeners para o pool
pool.on('connect', (client) => {
  console.log('‚úÖ Nova conex√£o estabelecida com PostgreSQL');
});

pool.on('error', (err, client) => {
  console.error('‚ùå Erro no pool de conex√µes PostgreSQL:', err);
  process.exit(-1);
});

pool.on('remove', (client) => {
  console.log('üîÑ Conex√£o removida do pool');
});

// Fun√ß√£o para testar conex√£o
const testConnection = async () => {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW(), version()');
    const currentTime = result.rows[0].now;
    const version = result.rows[0].version;
    client.release();
    
    console.log('‚úÖ Conex√£o com banco de dados bem-sucedida');
    console.log('üïê Hora do servidor:', currentTime);
    console.log('üìä Vers√£o PostgreSQL:', version.split(' ').slice(0, 2).join(' '));
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar com banco de dados:', {
      message: error.message,
      code: error.code,
      detail: error.detail
    });
    return false;
  }
};

// Fun√ß√£o para executar queries com log e retry
const query = async (text, params, retries = 3) => {
  const start = Date.now();
  let lastError;
  
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const result = await pool.query(text, params);
      const duration = Date.now() - start;
      
      if (process.env.NODE_ENV === 'development') {
        console.log('üîç Query executada:', {
          text: text.substring(0, 100) + (text.length > 100 ? '...' : ''),
          params: params ? params.length : 0,
          rows: result.rows.length,
          duration: `${duration}ms`,
          attempt: attempt > 1 ? attempt : undefined
        });
      }
      
      return result;
    } catch (error) {
      lastError = error;
      console.error(`‚ùå Erro na query (tentativa ${attempt}/${retries}):`, {
        error: error.message,
        code: error.code,
        query: text.substring(0, 100)
      });
      
      if (attempt < retries) {
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }
  }
  
  throw lastError;
};

// Fun√ß√£o para executar transa√ß√µes
const transaction = async (callback) => {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const result = await callback(client);
    await client.query('COMMIT');
    return result;
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
};

// Testar conex√£o na inicializa√ß√£o
testConnection().catch(error => {
  console.error('üí• Falha cr√≠tica na conex√£o inicial com banco de dados');
  process.exit(1);
});

module.exports = {
  pool,
  query,
  transaction,
  testConnection
};
