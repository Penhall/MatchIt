# docker-compose-fixed.yml - Configuração Docker Completa MatchIt
version: '3.8'

services:
  # ===== BASE DE DADOS =====
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: matchit_db
      POSTGRES_USER: matchit
      POSTGRES_PASSWORD: matchit123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - matchit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matchit -d matchit_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - matchit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ===== BACKEND API =====
  backend:
    build:
      context: ..
      dockerfile: infraestrutura/Dockerfile.backend
      target: production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: matchit_db
      DB_USER: matchit
      DB_PASSWORD: matchit123
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-matchit_secret_key_production_2024}
      JWT_EXPIRES_IN: 7d
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://localhost:8081,http://127.0.0.1:3000,http://127.0.0.1:5173,http://127.0.0.1:8081,http://frontend:80"
    ports:
      - "3000:3000"
    networks:
      - matchit-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===== FRONTEND (Desenvolvimento) =====
  frontend-dev:
    build:
      context: ..
      dockerfile: infraestrutura/Dockerfile.frontend.dev
      target: development
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_URL: http://localhost:3000/api
      VITE_BACKEND_URL: http://backend:3000
      NODE_ENV: development
    ports:
      - "5173:5173"
    networks:
      - matchit-network
    volumes:
      - ../frontend.User:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0
    profiles:
      - dev

  # ===== FRONTEND (Produção) =====
  frontend:
    build:
      context: ..
      dockerfile: infraestrutura/Dockerfile.frontend
      target: production
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
    networks:
      - matchit-network
    environment:
      NGINX_HOST: localhost
      NGINX_PORT: 80
    profiles:
      - prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===== NGINX PROXY (Load Balancer) =====
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - matchit-network
    profiles:
      - proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

# ===== NETWORKS =====
networks:
  matchit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1