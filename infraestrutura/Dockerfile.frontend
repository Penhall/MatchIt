# Dockerfile.frontend - Frontend React MatchIt
FROM node:20-alpine AS base

# Instalar dependências do sistema
RUN apk add --no-cache curl

# Definir diretório de trabalho
WORKDIR /app

# === STAGE 1: Dependencies ===
FROM base AS deps

# Copiar arquivos de dependências
COPY frontend.User/package*.json ./

# Instalar dependências
RUN npm ci && npm cache clean --force

# === STAGE 2: Development ===
FROM base AS development

# Copiar dependências
COPY --from=deps /app/node_modules ./node_modules

# Copiar código fonte do frontend
COPY frontend.User/ ./

# Expor porta de desenvolvimento
EXPOSE 8080

# Health check para desenvolvimento
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/ || exit 1

# Comando para desenvolvimento
CMD ["node", "server.js"]

# === STAGE 3: Production ===
FROM nginx:alpine AS production

# Instalar curl para health checks
RUN apk add --no-cache curl

# Copiar arquivos estáticos do frontend
COPY frontend.User/ /usr/share/nginx/html/

# Copiar configuração nginx customizada
COPY infraestrutura/nginx.conf /etc/nginx/conf.d/default.conf

# Criar diretório para logs
RUN mkdir -p /var/log/nginx && \
    chown -R nginx:nginx /var/log/nginx

# Expor porta
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Comando de inicialização
CMD ["nginx", "-g", "daemon off;"]
