// vite.config.ts - Configuração completa com aliases corrigidos
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  
  // ✅ ALIASES COMPLETOS - Resolve todos os problemas de import
  resolve: {
    alias: {
      // Aliases principais
      '@': path.resolve(__dirname, './src'),
      '@components': path.resolve(__dirname, './src/components'),
      '@components/common': path.resolve(__dirname, './src/components/common'),
      '@context': path.resolve(__dirname, './src/context'),
      '@services': path.resolve(__dirname, './src/services'),
      '@hooks': path.resolve(__dirname, './src/hooks'),
      '@utils': path.resolve(__dirname, './src/utils'),
      '@screens': path.resolve(__dirname, './screens'),
      '@assets': path.resolve(__dirname, './src/assets'),
      '@types': path.resolve(__dirname, './src/types'),
      
      // Aliases alternativos (compatibilidade)
      'src': path.resolve(__dirname, './src'),
      'screens': path.resolve(__dirname, './screens'),
      'components': path.resolve(__dirname, './src/components'),
      'context': path.resolve(__dirname, './src/context'),
      'services': path.resolve(__dirname, './src/services'),
      'hooks': path.resolve(__dirname, './src/hooks'),
      'utils': path.resolve(__dirname, './src/utils'),
      
      // Aliases específicos para arquivos problemáticos
      '@/context/AuthContext': path.resolve(__dirname, './src/context/AuthContext'),
      'AuthContext': path.resolve(__dirname, './src/context/AuthContext')
    }
  },
  
  // Configuração DEV mode (npm run dev)
  server: {
    port: 5173,
    host: true,
    open: true,
    strictPort: false,
    
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
        secure: false,
        timeout: 15000,
        
        configure: (proxy) => {
          proxy.on('error', (err, req, res) => {
            console.error('🔴 Dev Proxy Error:', err.message);
          });
          
          proxy.on('proxyReq', (proxyReq, req) => {
            console.log(`🔄 Dev Proxy: ${req.method} ${req.url} → http://localhost:3001${req.url}`);
          });
          
          proxy.on('proxyRes', (proxyRes, req) => {
            const emoji = proxyRes.statusCode < 400 ? '✅' : '❌';
            console.log(`${emoji} Dev Proxy: ${proxyRes.statusCode} ${req.url}`);
          });
        }
      }
    }
  },
  
  // Configuração PREVIEW mode (npm run preview)  
  preview: {
    port: 4173,
    host: true,
    open: true,
    
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
        secure: false,
        timeout: 15000,
        
        configure: (proxy) => {
          proxy.on('error', (err, req, res) => {
            console.error('🔴 Preview Proxy Error:', err.message);
          });
          
          proxy.on('proxyReq', (proxyReq, req) => {
            console.log(`🔄 Preview Proxy: ${req.method} ${req.url} → http://localhost:3001${req.url}`);
          });
          
          proxy.on('proxyRes', (proxyRes, req) => {
            const emoji = proxyRes.statusCode < 400 ? '✅' : '❌';
            console.log(`${emoji} Preview Proxy: ${proxyRes.statusCode} ${req.url}`);
          });
        }
      }
    }
  },
  
  // ✅ BUILD OTIMIZADO - Resolve problemas de aliases no build
  build: {
    outDir: 'dist',
    sourcemap: true,
    assetsDir: 'assets',
    emptyOutDir: true,
    
    // Configuração específica do Rollup
    rollupOptions: {
      // Não externalizar módulos locais
      external: [],
      
      // Configuração de outputs
      output: {
        manualChunks: {
          // Separar vendors grandes
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
          ui: ['@heroicons/react'],
          utils: ['axios']
        },
        
        // Nomes de chunks otimizados
        chunkFileNames: 'assets/js/[name]-[hash].js',
        entryFileNames: 'assets/js/[name]-[hash].js',
        assetFileNames: 'assets/[ext]/[name]-[hash].[ext]'
      }
    },
    
    // Configurações de build específicas
    target: 'esnext',
    minify: 'esbuild',
    
    // Definir variáveis globais no build
    define: {
      __API_URL__: JSON.stringify(process.env.VITE_API_URL || 'http://localhost:3001/api'),
      __APP_VERSION__: JSON.stringify(process.env.npm_package_version || '1.0.0')
    }
  },
  
  // Otimização de dependências
  optimizeDeps: {
    include: [
      'react',
      'react-dom',
      'react-router-dom',
      'axios'
    ],
    exclude: [
      // Excluir dependências que podem causar problemas
    ]
  },
  
  // Configurações CSS
  css: {
    devSourcemap: true,
    modules: {
      localsConvention: 'camelCase'
    }
  },
  
  // Configurações de desenvolvimento
  define: {
    // Variáveis globais disponíveis no código
    __API_URL__: JSON.stringify(process.env.VITE_API_URL || 'http://localhost:3001/api'),