// server/routes/profile.js - Rotas de Perfil (ES Modules)
import express from 'express';
import { optionalAuth } from '../middleware/authMiddleware.js';

const router = express.Router();

console.log('üë§ Carregando rotas de perfil (ES Modules)...');

/**
 * GET /api/profile
 * Buscar dados b√°sicos do perfil do usu√°rio
 */
router.get('/', optionalAuth, async (req, res) => {
    try {
        const userId = req.user?.userId || req.user?.id;
        console.log('üì• GET /api/profile - userId:', userId);
        
        // Mock de dados do usu√°rio para desenvolvimento
        const userData = {
            id: userId,
            name: req.user?.name || 'Usu√°rio MatchIt',
            email: req.user?.email || 'user@matchit.com',
            createdAt: new Date('2024-01-01'),
            profileCompletion: 75,
            hasStylePreferences: true,
            preferences: {
                ageRange: [22, 35],
                maxDistance: 50,
                interests: ['m√∫sica', 'viagem', 'tecnologia']
            }
        };
        
        res.json({
            success: true,
            data: userData,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro em GET /api/profile:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            code: 'INTERNAL_ERROR'
        });
    }
});

/**
 * GET /api/profile/style-preferences
 * Buscar prefer√™ncias de estilo do usu√°rio
 */
router.get('/style-preferences', optionalAuth, async (req, res) => {
    try {
        const userId = req.user?.userId || req.user?.id;
        console.log('üì• GET /api/profile/style-preferences - userId:', userId);
        
        // Mock de prefer√™ncias de estilo
        const stylePreferences = {
            colors: {
                preferences: { 
                    favorites: ['azul', 'verde'], 
                    dislikes: ['amarelo'],
                    style: 'moderno'
                },
                updatedAt: new Date()
            },
            styles: {
                preferences: { 
                    casual: 8, 
                    formal: 6, 
                    esportivo: 7 
                },
                updatedAt: new Date()
            },
            accessories: {
                preferences: { 
                    minimalist: true, 
                    vintage: false 
                },
                updatedAt: new Date()
            }
        };
        
        res.json({
            success: true,
            data: stylePreferences,
            count: Object.keys(stylePreferences).length,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro em GET /api/profile/style-preferences:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao buscar prefer√™ncias de estilo',
            code: 'FETCH_PREFERENCES_ERROR'
        });
    }
});

/**
 * PUT /api/profile/style-preferences
 * Atualizar prefer√™ncias de estilo
 */
router.put('/style-preferences', optionalAuth, async (req, res) => {
    try {
        const userId = req.user?.userId || req.user?.id;
        const { category, preferences } = req.body;
        
        console.log('üì• PUT /api/profile/style-preferences:', { userId, category, preferences });
        
        if (!category || !preferences) {
            return res.status(400).json({
                success: false,
                error: 'Categoria e prefer√™ncias s√£o obrigat√≥rias',
                code: 'MISSING_REQUIRED_FIELDS'
            });
        }
        
        // Mock de atualiza√ß√£o - em produ√ß√£o salvaria no banco
        const updatedPreference = {
            id: `pref_${Date.now()}`,
            category,
            preferences,
            updatedAt: new Date()
        };
        
        res.json({
            success: true,
            message: 'Prefer√™ncias atualizadas com sucesso',
            data: updatedPreference,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro em PUT /api/profile/style-preferences:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao atualizar prefer√™ncias',
            code: 'UPDATE_PREFERENCES_ERROR'
        });
    }
});

/**
 * GET /api/profile/style-preferences/stats
 * Estat√≠sticas de completude do perfil
 */
router.get('/style-preferences/stats', optionalAuth, async (req, res) => {
    try {
        const totalCategories = 5; // colors, styles, accessories, shoes, patterns
        const completedCategories = 3; // Mock
        const completionPercentage = Math.round((completedCategories / totalCategories) * 100);
        
        res.json({
            success: true,
            data: {
                totalCategories,
                completedCategories,
                completionPercentage,
                missingCategories: totalCategories - completedCategories,
                lastUpdated: new Date()
            },
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro em GET /api/profile/style-preferences/stats:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao buscar estat√≠sticas',
            code: 'STATS_ERROR'
        });
    }
});

console.log('‚úÖ Rotas de perfil carregadas (ES Modules)');

export default router;
