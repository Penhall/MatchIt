# utils/auth.py - Sistema de autentica√ß√£o administrativo
import streamlit as st
import bcrypt
import time
from datetime import datetime, timedelta
from typing import Dict, Optional, List
import logging
import sys
import os

# Adicionar o diret√≥rio parent ao path para importar config
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from config import AUTH_CONFIG

logger = logging.getLogger(__name__)

class AuthManager:
    """Gerenciador de autentica√ß√£o para o dashboard administrativo"""
    
    def __init__(self):
        self.session_timeout = AUTH_CONFIG['session_timeout']
        self.admin_users = AUTH_CONFIG['admin_users']
        
    def hash_password(self, password: str) -> str:
        """Gera hash de uma senha"""
        return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    
    def verify_password(self, password: str, hashed: str) -> bool:
        """Verifica se a senha corresponde ao hash"""
        try:
            return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))
        except Exception as e:
            logger.error(f"Erro ao verificar senha: {e}")
            return False
    
    def authenticate_user(self, username: str, password: str) -> Optional[Dict]:
        """
        Autentica um usu√°rio
        
        Args:
            username: Nome do usu√°rio
            password: Senha do usu√°rio
            
        Returns:
            Dict com dados do usu√°rio se autenticado, None caso contr√°rio
        """
        if username not in self.admin_users:
            logger.warning(f"Tentativa de login com usu√°rio inexistente: {username}")
            return None
            
        user_data = self.admin_users[username]
        stored_password = user_data['password']
        
        # Verificar se a senha armazenada est√° em hash ou texto plano
        if stored_password.startswith('$2b$'):
            # Senha est√° em hash
            password_valid = self.verify_password(password, stored_password)
        else:
            # Senha em texto plano (para desenvolvimento)
            password_valid = password == stored_password
        
        if password_valid:
            logger.info(f"Login bem-sucedido para usu√°rio: {username}")
            return {
                'username': username,
                'role': user_data['role'],
                'permissions': user_data['permissions'],
                'login_time': datetime.now(),
                'last_activity': datetime.now()
            }
        else:
            logger.warning(f"Tentativa de login com senha incorreta para: {username}")
            return None
    
    def is_session_valid(self, user_data: Dict) -> bool:
        """Verifica se a sess√£o do usu√°rio ainda √© v√°lida"""
        if not user_data:
            return False
            
        last_activity = user_data.get('last_activity')
        if not last_activity:
            return False
            
        # Verificar timeout
        if isinstance(last_activity, str):
            last_activity = datetime.fromisoformat(last_activity)
            
        session_age = (datetime.now() - last_activity).total_seconds()
        return session_age < self.session_timeout
    
    def update_last_activity(self):
        """Atualiza o timestamp da √∫ltima atividade"""
        if 'user' in st.session_state:
            st.session_state.user['last_activity'] = datetime.now()
    
    def has_permission(self, permission: str) -> bool:
        """Verifica se o usu√°rio atual tem uma permiss√£o espec√≠fica"""
        if 'user' not in st.session_state:
            return False
            
        user_permissions = st.session_state.user.get('permissions', [])
        return permission in user_permissions
    
    def logout(self):
        """Efetua logout do usu√°rio atual"""
        if 'user' in st.session_state:
            username = st.session_state.user.get('username', 'unknown')
            logger.info(f"Logout realizado para usu√°rio: {username}")
            del st.session_state.user
        
        # Limpar outras vari√°veis de sess√£o relacionadas
        session_keys_to_clear = ['authenticated', 'login_time']
        for key in session_keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
    
    def get_current_user(self) -> Optional[Dict]:
        """Retorna dados do usu√°rio atual se autenticado"""
        if 'user' not in st.session_state:
            return None
            
        user_data = st.session_state.user
        if self.is_session_valid(user_data):
            self.update_last_activity()
            return user_data
        else:
            self.logout()
            return None

def show_login_form():
    """Exibe formul√°rio de login"""
    st.markdown("## üîê Acesso Administrativo")
    st.markdown("---")
    
    with st.form("login_form"):
        st.markdown("### Entre com suas credenciais")
        username = st.text_input("üë§ Usu√°rio", placeholder="Digite seu usu√°rio")
        password = st.text_input("üîë Senha", type="password", placeholder="Digite sua senha")
        
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            submit_button = st.form_submit_button("üöÄ Entrar", use_container_width=True)
        
        if submit_button:
            if not username or not password:
                st.error("‚ùå Por favor, preencha usu√°rio e senha")
                return False
                
            auth_manager = AuthManager()
            user_data = auth_manager.authenticate_user(username, password)
            
            if user_data:
                st.session_state.user = user_data
                st.session_state.authenticated = True
                st.success("‚úÖ Login realizado com sucesso!")
                time.sleep(1)
                st.rerun()
                return True
            else:
                st.error("‚ùå Usu√°rio ou senha incorretos")
                return False
    
    # Informa√ß√µes sobre credenciais padr√£o (apenas para desenvolvimento)
    if os.getenv('ENVIRONMENT') == 'development':
        with st.expander("‚ÑπÔ∏è Credenciais de Desenvolvimento"):
            st.info("""
            **Credenciais padr√£o:**
            - **Admin**: admin / matchit_admin_2024
            - **Moderador**: moderator / matchit_mod_2024
            
            ‚ö†Ô∏è Altere as senhas em produ√ß√£o!
            """)
    
    return False

def require_auth(permissions: List[str] = None):
    """
    Decorator para p√°ginas que requerem autentica√ß√£o
    
    Args:
        permissions: Lista de permiss√µes necess√°rias
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            auth_manager = AuthManager()
            current_user = auth_manager.get_current_user()
            
            if not current_user:
                show_login_form()
                return
            
            # Verificar permiss√µes espec√≠ficas
            if permissions:
                for permission in permissions:
                    if not auth_manager.has_permission(permission):
                        st.error(f"‚ùå Voc√™ n√£o tem permiss√£o '{permission}' para acessar esta p√°gina")
                        return
            
            # Executar fun√ß√£o original
            return func(*args, **kwargs)
        
        return wrapper
    return decorator

def show_user_info():
    """Exibe informa√ß√µes do usu√°rio logado no sidebar"""
    if 'user' not in st.session_state:
        return
        
    user = st.session_state.user
    
    with st.sidebar:
        st.markdown("---")
        st.markdown("### üë§ Usu√°rio Logado")
        
        # Informa√ß√µes b√°sicas
        st.write(f"**Usu√°rio:** {user['username']}")
        st.write(f"**Perfil:** {user['role'].replace('_', ' ').title()}")
        
        # Tempo de sess√£o
        login_time = user.get('login_time')
        if login_time:
            if isinstance(login_time, str):
                login_time = datetime.fromisoformat(login_time)
            session_duration = datetime.now() - login_time
            hours, remainder = divmod(int(session_duration.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            st.write(f"**Sess√£o:** {hours:02d}:{minutes:02d}:{seconds:02d}")
        
        # Permiss√µes
        permissions = user.get('permissions', [])
        if permissions:
            st.write("**Permiss√µes:**")
            for perm in permissions:
                st.write(f"‚Ä¢ {perm}")
        
        # Bot√£o de logout
        if st.button("üö™ Sair", use_container_width=True):
            auth_manager = AuthManager()
            auth_manager.logout()
            st.rerun()

def check_authentication() -> bool:
    """
    Verifica se o usu√°rio est√° autenticado
    
    Returns:
        True se autenticado, False caso contr√°rio
    """
    auth_manager = AuthManager()
    current_user = auth_manager.get_current_user()
    return current_user is not None

def get_current_user_data() -> Optional[Dict]:
    """Retorna dados do usu√°rio atual"""
    auth_manager = AuthManager()
    return auth_manager.get_current_user()

# Fun√ß√µes utilit√°rias para verifica√ß√£o de permiss√µes
def can_read() -> bool:
    """Verifica se pode ler dados"""
    auth_manager = AuthManager()
    return auth_manager.has_permission('read')

def can_write() -> bool:
    """Verifica se pode escrever/editar dados"""
    auth_manager = AuthManager()
    return auth_manager.has_permission('write')

def can_delete() -> bool:
    """Verifica se pode deletar dados"""
    auth_manager = AuthManager()
    return auth_manager.has_permission('delete')

def can_admin() -> bool:
    """Verifica se tem permiss√µes administrativas"""
    auth_manager = AuthManager()
    return auth_manager.has_permission('admin')

def is_super_admin() -> bool:
    """Verifica se √© super administrador"""
    if 'user' not in st.session_state:
        return False
    return st.session_state.user.get('role') == 'super_admin'