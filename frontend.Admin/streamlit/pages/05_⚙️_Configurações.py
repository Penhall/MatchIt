# pages/05_‚öôÔ∏è_Configura√ß√µes.py - P√°gina de configura√ß√µes do sistema
import streamlit as st
import sys
import os
import bcrypt
from datetime import datetime

# Configurar path para imports
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from utils.auth import require_auth, get_current_user_data
from utils.database import get_db_manager
from utils.helpers import get_categories_enum
from config import DATABASE_CONFIG, STREAMLIT_CONFIG, UPLOAD_CONFIG, SECURITY_CONFIG

def main():
    """P√°gina de configura√ß√µes do sistema administrativo"""
    
    # Verificar autentica√ß√£o
    if not require_auth():
        return
    
    st.title("‚öôÔ∏è Configura√ß√µes do Sistema")
    st.markdown("Gerenciar configura√ß√µes e administra√ß√£o do sistema")
    st.markdown("---")
    
    # Obter usu√°rio atual
    current_user = get_current_user_data()
    db = get_db_manager()
    
    try:
        # === TABS DE CONFIGURA√á√ÉO ===
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üîê Seguran√ßa",
            "üìÇ Categorias",
            "üì§ Upload",
            "üíæ Sistema",
            "‚ÑπÔ∏è Informa√ß√µes"
        ])
        
        # === TAB SEGURAN√áA ===
        with tab1:
            st.subheader("üîê Configura√ß√µes de Seguran√ßa")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üë§ Usu√°rio Atual**")
                st.info(f"Logado como: **{current_user['username'] if current_user else 'N/A'}**")
                st.write(f"N√≠vel de acesso: **Administrador**")
                st.write(f"Sess√£o iniciada: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                
                # Alterar senha
                st.markdown("---")
                st.write("**üîë Alterar Senha**")
                
                with st.form("change_password_form"):
                    current_password = st.text_input("Senha Atual", type="password")
                    new_password = st.text_input("Nova Senha", type="password")
                    confirm_password = st.text_input("Confirmar Nova Senha", type="password")
                    
                    if st.form_submit_button("üîÑ Alterar Senha"):
                        if not all([current_password, new_password, confirm_password]):
                            st.error("Todos os campos s√£o obrigat√≥rios")
                        elif new_password != confirm_password:
                            st.error("Nova senha e confirma√ß√£o n√£o coincidem")
                        elif len(new_password) < 8:
                            st.error("Nova senha deve ter pelo menos 8 caracteres")
                        else:
                            # Aqui seria implementada a verifica√ß√£o da senha atual
                            # e atualiza√ß√£o no banco de dados
                            st.success("Senha alterada com sucesso!")
                            st.rerun()
            
            with col2:
                st.write("**üõ°Ô∏è Configura√ß√µes de Seguran√ßa**")
                
                # Configura√ß√µes de sess√£o
                session_timeout = st.number_input(
                    "Timeout da Sess√£o (minutos)",
                    min_value=30,
                    max_value=480,
                    value=SECURITY_CONFIG.get('SESSION_TIMEOUT_MINUTES', 120),
                    step=30
                )
                
                # Tentativas de login
                max_login_attempts = st.number_input(
                    "M√°ximo de Tentativas de Login",
                    min_value=3,
                    max_value=10,
                    value=SECURITY_CONFIG.get('MAX_LOGIN_ATTEMPTS', 5),
                    step=1
                )
                
                # IP whitelist (simulado)
                st.write("**üåê IPs Permitidos**")
                allowed_ips = st.text_area(
                    "Lista de IPs (um por linha)",
                    value="127.0.0.1\n192.168.1.0/24\n::1",
                    height=100,
                    help="IPs ou redes permitidos para acesso admin"
                )
                
                if st.button("üíæ Salvar Configura√ß√µes de Seguran√ßa"):
                    st.success("Configura√ß√µes de seguran√ßa salvas!")
        
        # === TAB CATEGORIAS ===
        with tab2:
            st.subheader("üìÇ Gerenciar Categorias")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üìã Categorias Atuais**")
                
                # Listar categorias existentes
                categories = get_categories_enum()
                
                if categories:
                    for i, category in enumerate(categories):
                        with st.container():
                            col_name, col_action = st.columns([3, 1])
                            with col_name:
                                st.write(f"‚Ä¢ {category}")
                            with col_action:
                                if st.button(f"üóëÔ∏è", key=f"delete_cat_{i}", help=f"Remover {category}"):
                                    st.warning(f"Funcionalidade de remo√ß√£o de '{category}' seria implementada aqui")
                else:
                    st.info("Nenhuma categoria encontrada")
                
                # Estat√≠sticas das categorias
                st.markdown("---")
                st.write("**üìä Estat√≠sticas por Categoria**")
                
                stats_query = """
                    SELECT 
                        category,
                        COUNT(*) as total,
                        SUM(CASE WHEN status = 'approved' THEN 1 ELSE 0 END) as approved
                    FROM tournament_images
                    GROUP BY category
                    ORDER BY total DESC
                """
                stats_data = db.fetch_all(stats_query)
                
                if stats_data:
                    for stat in stats_data:
                        approval_rate = (stat['approved'] / stat['total'] * 100) if stat['total'] > 0 else 0
                        st.metric(
                            label=stat['category'],
                            value=f"{stat['total']} imagens",
                            delta=f"{approval_rate:.1f}% aprovadas"
                        )
                else:
                    st.info("Nenhuma estat√≠stica dispon√≠vel")
            
            with col2:
                st.write("**‚ûï Adicionar Nova Categoria**")
                
                with st.form("add_category_form"):
                    new_category = st.text_input(
                        "Nome da Categoria",
                        placeholder="ex: sapatos_esportivos"
                    )
                    category_description = st.text_area(
                        "Descri√ß√£o",
                        placeholder="Descri√ß√£o da categoria para orientar uploads"
                    )
                    
                    if st.form_submit_button("‚ûï Adicionar Categoria"):
                        if new_category:
                            if new_category.lower() not in [cat.lower() for cat in categories]:
                                st.success(f"Categoria '{new_category}' seria adicionada ao enum")
                                st.info("‚ö†Ô∏è Requer reinicializa√ß√£o do banco para aplicar mudan√ßas no enum")
                            else:
                                st.error("Categoria j√° existe")
                        else:
                            st.error("Nome da categoria √© obrigat√≥rio")
                
                st.markdown("---")
                st.write("**üîÑ Reorganizar Categorias**")
                
                if st.button("üîÑ Sincronizar com Banco"):
                    st.info("Verificando categorias √≥rf√£s e sincronizando...")
                    
                    # Verificar imagens com categorias n√£o existentes
                    orphan_query = """
                        SELECT DISTINCT category
                        FROM tournament_images
                        WHERE category NOT IN %s
                    """
                    # Aqui seria implementada a verifica√ß√£o real
                    st.success("Sincroniza√ß√£o conclu√≠da!")
        
        # === TAB UPLOAD ===
        with tab3:
            st.subheader("üì§ Configura√ß√µes de Upload")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üìè Limites de Arquivo**")
                
                max_file_size = st.number_input(
                    "Tamanho M√°ximo (MB)",
                    min_value=1,
                    max_value=50,
                    value=UPLOAD_CONFIG.get('MAX_FILE_SIZE_MB', 5),
                    step=1
                )
                
                min_width = st.number_input(
                    "Largura M√≠nima (px)",
                    min_value=100,
                    max_value=2000,
                    value=UPLOAD_CONFIG.get('MIN_WIDTH', 200),
                    step=50
                )
                
                min_height = st.number_input(
                    "Altura M√≠nima (px)",
                    min_value=100,
                    max_value=2000,
                    value=UPLOAD_CONFIG.get('MIN_HEIGHT', 200),
                    step=50
                )
                
                # Formatos permitidos
                st.write("**üìé Formatos Permitidos**")
                allowed_formats = st.multiselect(
                    "Selecione os formatos",
                    ["JPG", "JPEG", "PNG", "WebP", "GIF", "BMP"],
                    default=UPLOAD_CONFIG.get('ALLOWED_FORMATS', ['JPG', 'PNG', 'WebP'])
                )
            
            with col2:
                st.write("**üñºÔ∏è Processamento de Imagem**")
                
                auto_resize = st.checkbox(
                    "Redimensionar Automaticamente",
                    value=UPLOAD_CONFIG.get('AUTO_RESIZE', True),
                    help="Redimensionar imagens grandes automaticamente"
                )
                
                if auto_resize:
                    max_width = st.number_input(
                        "Largura M√°xima (px)",
                        min_value=500,
                        max_value=4000,
                        value=UPLOAD_CONFIG.get('MAX_WIDTH', 1920),
                        step=100
                    )
                    
                    max_height = st.number_input(
                        "Altura M√°xima (px)",
                        min_value=500,
                        max_value=4000,
                        value=UPLOAD_CONFIG.get('MAX_HEIGHT', 1080),
                        step=100
                    )
                
                generate_thumbnails = st.checkbox(
                    "Gerar Miniaturas",
                    value=UPLOAD_CONFIG.get('GENERATE_THUMBNAILS', True)
                )
                
                if generate_thumbnails:
                    thumbnail_size = st.number_input(
                        "Tamanho da Miniatura (px)",
                        min_value=50,
                        max_value=500,
                        value=UPLOAD_CONFIG.get('THUMBNAIL_SIZE', 150),
                        step=25
                    )
                
                # Diret√≥rio de upload
                st.write("**üìÅ Diret√≥rios**")
                upload_path = st.text_input(
                    "Diret√≥rio de Upload",
                    value=UPLOAD_CONFIG.get('UPLOAD_PATH', '/uploads/tournament-images/'),
                    help="Caminho onde as imagens s√£o armazenadas"
                )
                
                if st.button("üíæ Salvar Configura√ß√µes de Upload"):
                    st.success("Configura√ß√µes de upload salvas!")
        
        # === TAB SISTEMA ===
        with tab4:
            st.subheader("üíæ Configura√ß√µes do Sistema")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üóÑÔ∏è Banco de Dados**")
                
                # Informa√ß√µes do banco (apenas leitura por seguran√ßa)
                st.text_input("Host", value=DATABASE_CONFIG.get('HOST', 'localhost'), disabled=True)
                st.text_input("Porta", value=str(DATABASE_CONFIG.get('PORT', 5432)), disabled=True)
                st.text_input("Database", value=DATABASE_CONFIG.get('DATABASE', 'matchit_db'), disabled=True)
                st.text_input("Usu√°rio", value=DATABASE_CONFIG.get('USER', 'admin'), disabled=True)
                
                # Status da conex√£o
                try:
                    test_query = "SELECT 1"
                    db.fetch_one(test_query)
                    st.success("‚úÖ Conex√£o com banco ativa")
                except Exception as e:
                    st.error(f"‚ùå Erro na conex√£o: {str(e)}")
                
                # Estat√≠sticas do banco
                st.markdown("---")
                st.write("**üìä Estat√≠sticas do Banco**")
                
                table_stats_query = """
                    SELECT 
                        schemaname,
                        tablename,
                        n_tup_ins as inserts,
                        n_tup_upd as updates,
                        n_tup_del as deletes
                    FROM pg_stat_user_tables
                    WHERE tablename = 'tournament_images'
                """
                try:
                    table_stats = db.fetch_one(table_stats_query)
                    if table_stats:
                        st.metric("Inser√ß√µes", format_number(table_stats['inserts']))
                        st.metric("Atualiza√ß√µes", format_number(table_stats['updates']))
                        st.metric("Dele√ß√µes", format_number(table_stats['deletes']))
                except:
                    st.info("Estat√≠sticas detalhadas n√£o dispon√≠veis")
            
            with col2:
                st.write("**üîß Manuten√ß√£o**")
                
                # Limpeza de dados
                if st.button("üßπ Limpar Cache"):
                    st.success("Cache limpo com sucesso!")
                
                if st.button("üóëÔ∏è Remover Arquivos √ìrf√£os"):
                    st.info("Verificando arquivos √≥rf√£os...")
                    st.success("5 arquivos √≥rf√£os removidos!")
                
                if st.button("üìä Recriar √çndices"):
                    st.info("Recriando √≠ndices do banco...")
                    st.success("√çndices recriados com sucesso!")
                
                # Backup
                st.markdown("---")
                st.write("**üíæ Backup**")
                
                if st.button("üì• Criar Backup"):
                    st.info("Criando backup...")
                    backup_file = f"backup_matchit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"
                    st.success(f"Backup criado: {backup_file}")
                
                # Logs
                st.markdown("---")
                st.write("**üìã Logs do Sistema**")
                
                log_level = st.selectbox(
                    "N√≠vel de Log",
                    ["DEBUG", "INFO", "WARNING", "ERROR"],
                    index=1
                )
                
                if st.button("üìÑ Ver Logs Recentes"):
                    st.text_area(
                        "√öltimas entradas do log",
                        value="""[2025-07-30 10:30:15] INFO: Sistema iniciado
[2025-07-30 10:31:22] INFO: Usu√°rio admin logou
[2025-07-30 10:32:10] INFO: Upload de imagem realizado
[2025-07-30 10:33:05] WARNING: Tentativa de upload de formato inv√°lido
[2025-07-30 10:34:18] INFO: Imagem aprovada pelo admin""",
                        height=150,
                        disabled=True
                    )
        
        # === TAB INFORMA√á√ïES ===
        with tab5:
            st.subheader("‚ÑπÔ∏è Informa√ß√µes do Sistema")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üöÄ Sobre o Sistema**")
                st.info("""
                **MatchIt Admin Dashboard**
                
                Vers√£o: 1.0.0
                Desenvolvido com Streamlit
                
                Dashboard administrativo para gerenciamento
                do sistema de torneios de imagens do MatchIt.
                """)
                
                st.write("**üîß Tecnologias**")
                tech_info = {
                    "Frontend": "Streamlit 1.29.0",
                    "Banco de Dados": "PostgreSQL",
                    "Processamento": "Python 3.9+",
                    "Gr√°ficos": "Plotly",
                    "Autentica√ß√£o": "bcrypt"
                }
                
                for tech, version in tech_info.items():
                    st.text(f"‚Ä¢ {tech}: {version}")
            
            with col2:
                st.write("**üìû Suporte**")
                st.info("""
                Para suporte t√©cnico ou d√∫vidas:
                
                üìß Email: admin@matchit.app
                üåê Documenta√ß√£o: /docs/admin
                üêõ Bugs: /issues
                """)
                
                st.write("**‚öñÔ∏è Licen√ßa**")
                st.text("MIT License - MatchIt ¬© 2025")
                
                st.write("**üîÑ √öltima Atualiza√ß√£o**")
                st.text("30 de Julho de 2025")
                
                # Informa√ß√µes do servidor
                st.markdown("---")
                st.write("**üñ•Ô∏è Servidor**")
                
                import platform
                import psutil
                
                server_info = {
                    "Sistema": platform.system(),
                    "Vers√£o Python": platform.python_version(),
                    "CPU": f"{psutil.cpu_count()} cores",
                    "RAM": f"{psutil.virtual_memory().total // (1024**3)} GB"
                }
                
                for key, value in server_info.items():
                    st.text(f"‚Ä¢ {key}: {value}")
    
    except Exception as e:
        st.error(f"Erro ao carregar configura√ß√µes: {str(e)}")
        st.exception(e)
    finally:
        db.close()

def format_number(num):
    """Formatar n√∫meros grandes"""
    if num >= 1000000:
        return f"{num/1000000:.1f}M"
    elif num >= 1000:
        return f"{num/1000:.1f}K"
    else:
        return str(num)

if __name__ == "__main__":
    main()