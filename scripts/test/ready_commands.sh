# scripts/test/ready_commands.sh - Comandos prontos para copiar e colar
# Arquivo: scripts/test/ready_commands.sh

# =====================================================
# COMANDOS PRONTOS PARA USAR - COPIE E COLE
# =====================================================

# Token v√°lido (o mesmo que funcionou)
TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxODIwMTE0Yy0zNDhhLTQ1NWQtOGZhNi1kZWNhZjFlZjYxZmIiLCJlbWFpbCI6ImZpbmFsdGVzdEB0ZXN0LmNvbSIsImlhdCI6MTc1MDQ0NjMzMCwiZXhwIjoxNzUzMDM4MzMwfQ.5JjYitbMG4xJKJY4A8Kc3nqM4MCHFqPimY9W7wqEuL0"

# ID do usu√°rio de teste
USER_ID="1820114c-348a-455d-8fa6-decaf1ef61fb"

# URL da API
API_URL="http://localhost:3001"

echo "======================================================"
echo "   COMANDOS PRONTOS PARA TESTAR - COPIE E COLE"
echo "======================================================"
echo ""

# 1. BUSCAR PERFIL (j√° funcionando)
echo "1. üîç BUSCAR PERFIL DO USU√ÅRIO:"
echo "curl -H \"Authorization: Bearer $TOKEN\" $API_URL/api/profile/$USER_ID"
echo ""

# 2. BUSCAR PREFER√äNCIAS DE ESTILO
echo "2. üé® BUSCAR PREFER√äNCIAS DE ESTILO:"
echo "curl -H \"Authorization: Bearer $TOKEN\" $API_URL/api/profile/style-preferences"
echo ""

# 3. ATUALIZAR PERFIL
echo "3. ‚úèÔ∏è  ATUALIZAR PERFIL:"
echo "curl -X PUT -H \"Authorization: Bearer $TOKEN\" \\"
echo "-H \"Content-Type: application/json\" \\"
echo "-d '{\"displayName\":\"Nome Atualizado\",\"city\":\"S√£o Paulo\",\"age\":28,\"bio\":\"Bio teste\"}' \\"
echo "$API_URL/api/profile"
echo ""

# 4. ADICIONAR NOVA PREFER√äNCIA DE ESTILO
echo "4. üÜï ADICIONAR PREFER√äNCIA DE ESTILO:"
echo "curl -X PUT -H \"Authorization: Bearer $TOKEN\" \\"
echo "-H \"Content-Type: application/json\" \\"
echo "-d '{\"category\":\"Clothing\",\"questionId\":\"clothing_style_1\",\"selectedOption\":\"streetwear\"}' \\"
echo "$API_URL/api/profile/style-preferences"
echo ""

# 5. ADICIONAR PREFER√äNCIA DE CORES
echo "5. üåà ADICIONAR PREFER√äNCIA DE CORES:"
echo "curl -X PUT -H \"Authorization: Bearer $TOKEN\" \\"
echo "-H \"Content-Type: application/json\" \\"
echo "-d '{\"category\":\"Colors\",\"questionId\":\"color_preference_1\",\"selectedOption\":\"dark\"}' \\"
echo "$API_URL/api/profile/style-preferences"
echo ""

# 6. ADICIONAR HOBBY
echo "6. üéØ ADICIONAR HOBBY:"
echo "curl -X PUT -H \"Authorization: Bearer $TOKEN\" \\"
echo "-H \"Content-Type: application/json\" \\"
echo "-d '{\"category\":\"Hobbies\",\"questionId\":\"hobby_1\",\"selectedOption\":\"music\"}' \\"
echo "$API_URL/api/profile/style-preferences"
echo ""

# 7. VERIFICAR TODAS AS PREFER√äNCIAS AP√ìS ADI√á√ïES
echo "7. üìã VERIFICAR TODAS AS PREFER√äNCIAS:"
echo "curl -H \"Authorization: Bearer $TOKEN\" $API_URL/api/profile/style-preferences"
echo ""

# 8. VERIFICAR PERFIL COMPLETO ATUALIZADO
echo "8. üìä VERIFICAR PERFIL COMPLETO:"
echo "curl -H \"Authorization: Bearer $TOKEN\" $API_URL/api/profile/$USER_ID"
echo ""

echo "======================================================"
echo "   COMANDOS DE TESTE DE ERRO"
echo "======================================================"
echo ""

# 9. TESTAR SEM TOKEN (deve retornar 401)
echo "9. ‚ùå TESTE SEM TOKEN (deve retornar 401):"
echo "curl $API_URL/api/profile/style-preferences"
echo ""

# 10. TESTAR COM TOKEN INV√ÅLIDO (deve retornar 401)
echo "10. ‚ùå TESTE COM TOKEN INV√ÅLIDO (deve retornar 401):"
echo "curl -H \"Authorization: Bearer token_invalido\" $API_URL/api/profile/style-preferences"
echo ""

# 11. TESTAR USU√ÅRIO INEXISTENTE (deve retornar 404)
echo "11. ‚ùå TESTE USU√ÅRIO INEXISTENTE (deve retornar 404):"
echo "curl -H \"Authorization: Bearer $TOKEN\" $API_URL/api/profile/00000000-0000-0000-0000-000000000000"
echo ""

echo "======================================================"
echo "   COMANDOS √öTEIS"
echo "======================================================"
echo ""

# 12. VERIFICAR SE SERVIDOR EST√Å RODANDO
echo "12. üîÑ VERIFICAR SE SERVIDOR EST√Å RODANDO:"
echo "curl -I $API_URL/"
echo ""

# 13. MONITORAR LOGS EM TEMPO REAL
echo "13. üìù MONITORAR LOGS EM TEMPO REAL:"
echo "tail -f server.log"
echo "# ou"
echo "docker logs -f \$(docker ps -q --filter ancestor=matchit_backend)"
echo ""

# 14. REINICIAR SERVIDOR
echo "14. üîÑ REINICIAR SERVIDOR:"
echo "# Se usando npm:"
echo "cd server && npm run dev"
echo ""
echo "# Se usando docker:"
echo "docker-compose restart backend"
echo ""

echo "======================================================"
echo "   NOTAS IMPORTANTES"
echo "======================================================"
echo ""
echo "‚Ä¢ O token expira em 30 dias (exp: 1753038330)"
echo "‚Ä¢ Todos os comandos usam o usu√°rio de teste: $USER_ID"
echo "‚Ä¢ Para usar com outro usu√°rio, substitua o USER_ID"
echo "‚Ä¢ Para gerar novo token, fa√ßa login na aplica√ß√£o"
echo ""

# Fun√ß√£o para executar todos os testes automaticamente
echo "15. üöÄ EXECUTAR TODOS OS TESTES AUTOMATICAMENTE:"
echo "bash scripts/test/test_all_endpoints.sh"
echo ""