#!/usr/bin/env python3
"""
Script para criar estrutura completa do Sistema de Recomenda√ß√£o - MatchIt
Autor: Sistema de Recomenda√ß√£o MatchIt
Data: 2025-06-06
"""

import os
import json
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

class RecommendationSystemSetup:
    def __init__(self):
        """Inicializa o setup do sistema de recomenda√ß√£o"""
        self.project_root = Path.cwd()
        self.created_dirs = []
        self.dependencies = {
            'production': [
                '@types/node (j√° instalado)',
                'uuid (para IDs √∫nicos)',
                'date-fns (para manipula√ß√£o de datas)',
                'lodash (para manipula√ß√£o de arrays)'
            ],
            'development': [
                '@types/uuid',
                '@types/lodash',
                'jest (para testes)',
                '@types/jest'
            ],
            'optional': [
                'redis (para cache avan√ßado)',
                'bull (para jobs ass√≠ncronos)',
                'prometheus-api-metrics (para monitoramento)'
            ]
        }
    
    def print_header(self) -> None:
        """Imprime o cabe√ßalho do script"""
        print("üöÄ Configurando Sistema de Recomenda√ß√£o MatchIt...")
    
    def create_directory(self, dir_path: str) -> None:
        """Cria um diret√≥rio se n√£o existir"""
        path = self.project_root / dir_path
        path.mkdir(parents=True, exist_ok=True)
        self.created_dirs.append(dir_path)
    
    def create_directory_structure(self) -> None:
        """Cria toda a estrutura de diret√≥rios"""
        print("üìÅ Criando estrutura de diret√≥rios...")
        
        directories = [
            # Types e interfaces
            'types/recommendation',
            'types/analytics',
            
            # Services e engines
            'services/recommendation',
            'services/analytics',
            
            # API routes
            'routes/recommendation',
            
            # Hooks React
            'hooks/recommendation',
            
            # Componentes React
            'components/recommendation',
            'components/analytics',
            
            # Database migrations
            'scripts/migrations/recommendation',
            
            # Utils e helpers
            'utils/recommendation',
            'utils/analytics',
            
            # Testes
            'tests/recommendation',
            'tests/analytics',
            
            # Config
            'config/recommendation'
        ]
        
        for directory in directories:
            self.create_directory(directory)
        
        print("‚úÖ Estrutura de diret√≥rios criada!")
    
    def print_implementation_plan(self) -> None:
        """Imprime o plano de implementa√ß√£o detalhado"""
        print("üìù Arquivos que ser√£o implementados:")
        print()
        
        phases = {
            "FASE 1: Adequa√ß√£o da Base": {
                "üìÅ Types/Interfaces": [
                    "types/recommendation/base.ts",
                    "types/recommendation/extended-user.ts", 
                    "types/recommendation/match-score.ts",
                    "types/recommendation/user-interaction.ts",
                    "types/recommendation/index.ts"
                ],
                "üìÅ Database Extensions": [
                    "scripts/migrations/recommendation/001_extend_user_profiles.sql",
                    "scripts/migrations/recommendation/002_create_interactions_table.sql",
                    "scripts/migrations/recommendation/003_create_algorithm_weights.sql",
                    "scripts/migrations/recommendation/004_create_recommendation_cache.sql"
                ],
                "üìÅ Backend Extensions": [
                    "routes/recommendation/feedback.ts",
                    "routes/recommendation/preferences.ts",
                    "services/recommendation/user-profile-service.ts"
                ]
            },
            "FASE 2: Engine de Recomenda√ß√£o": {
                "üìÅ Core Engine": [
                    "services/recommendation/recommendation-engine.ts",
                    "services/recommendation/recommendation-service.ts",
                    "services/recommendation/algorithm-weights.ts"
                ],
                "üìÅ API Routes": [
                    "routes/recommendation/recommendations.ts",
                    "routes/recommendation/index.ts"
                ]
            },
            "FASE 3: Sistema de Feedback": {
                "üìÅ Frontend Components": [
                    "components/recommendation/recommendation-card.tsx",
                    "components/recommendation/recommendation-list.tsx",
                    "components/recommendation/feedback-buttons.tsx"
                ],
                "üìÅ React Hooks": [
                    "hooks/recommendation/use-recommendations.ts",
                    "hooks/recommendation/use-feedback.ts"
                ],
                "üìÅ Analytics": [
                    "services/analytics/recommendation-analytics.ts",
                    "components/analytics/recommendation-dashboard.tsx"
                ]
            },
            "FASE 4: Otimiza√ß√µes Avan√ßadas": {
                "üìÅ Performance": [
                    "services/recommendation/cache-service.ts",
                    "utils/recommendation/query-optimizer.ts"
                ],
                "üìÅ Advanced Features": [
                    "services/recommendation/ml-service.ts",
                    "components/recommendation/advanced-filters.tsx"
                ]
            }
        }
        
        for phase_name, categories in phases.items():
            print(f"=== {phase_name} ===")
            for category_name, files in categories.items():
                print(f"{category_name}:")
                for file in files:
                    print(f"  - {file}")
            print()
        
        # Arquivos adicionais
        additional_files = {
            "üìÅ Configuration": [
                "config/recommendation/algorithm-config.ts",
                "config/recommendation/cache-config.ts"
            ],
            "üìÅ Tests": [
                "tests/recommendation/engine.test.ts",
                "tests/recommendation/service.test.ts",
                "tests/recommendation/api.test.ts"
            ],
            "üìÅ Utils": [
                "utils/recommendation/similarity-calculations.ts",
                "utils/recommendation/geo-utils.ts",
                "utils/analytics/metrics-calculator.ts"
            ]
        }
        
        for category_name, files in additional_files.items():
            print(f"{category_name}:")
            for file in files:
                print(f"  - {file}")
        print()
        
        print("üéØ Total estimado: ~30 arquivos a serem criados ao longo das 4 fases")
        print()
    
    def check_project_structure(self) -> bool:
        """Verifica a estrutura b√°sica do projeto"""
        print("üì¶ Verificando depend√™ncias do projeto...")
        
        # Verificar package.json
        package_json_path = self.project_root / "package.json"
        if package_json_path.exists():
            print("‚úÖ package.json encontrado")
        else:
            print("‚ùå package.json n√£o encontrado - execute na raiz do projeto")
            return False
        
        # Verificar estrutura b√°sica
        basic_dirs = ['components', 'types', 'services']
        missing_dirs = []
        
        for dir_name in basic_dirs:
            dir_path = self.project_root / dir_name
            if dir_path.exists():
                continue
            else:
                missing_dirs.append(dir_name)
        
        if not missing_dirs:
            print("‚úÖ Estrutura b√°sica do projeto confirmada")
        else:
            print("‚ö†Ô∏è  Algumas pastas b√°sicas n√£o foram encontradas - ser√° criada estrutura completa")
            print(f"   Pastas ausentes: {', '.join(missing_dirs)}")
        
        return True
    
    def create_progress_file(self) -> None:
        """Cria o arquivo de progresso em markdown"""
        print("üìä Criando arquivo de progresso...")
        
        progress_content = f"""# Sistema de Recomenda√ß√£o MatchIt - Progresso da Implementa√ß√£o

## Status Geral: üü° Em Andamento

### FASE 1: Adequa√ß√£o da Base ‚è≥
- [ ] 1.1 Extens√£o de Tipos
- [ ] 1.2 Extens√£o do Banco
- [ ] 1.3 Adapta√ß√£o do Backend

### FASE 2: Engine de Recomenda√ß√£o B√°sico ‚è∏Ô∏è
- [ ] 2.1 RecommendationEngine Core
- [ ] 2.2 RecommendationService
- [ ] 2.3 APIs de Recomenda√ß√£o

### FASE 3: Sistema de Feedback e Aprendizado ‚è∏Ô∏è
- [ ] 3.1 Coleta de Feedback
- [ ] 3.2 Pesos Adaptativos
- [ ] 3.3 Melhorias de UX

### FASE 4: Otimiza√ß√µes e Features Avan√ßadas ‚è∏Ô∏è
- [ ] 4.1 Performance
- [ ] 4.2 Analytics Avan√ßados
- [ ] 4.3 Features Sociais

---
√öltima atualiza√ß√£o: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Estrutura de Diret√≥rios Criada

### Diret√≥rios Principais:
"""
        
        # Adicionar diret√≥rios criados
        for directory in sorted(self.created_dirs):
            progress_content += f"- {directory}/\n"
        
        progress_content += f"""
### Estat√≠sticas:
- Total de diret√≥rios criados: {len(self.created_dirs)}
- Data de cria√ß√£o: {datetime.now().strftime("%Y-%m-%d")}
- Estrutura baseada em: Sistema de Recomenda√ß√£o MatchIt v1.2.0

### Pr√≥ximos Passos:
1. Implementar tipos TypeScript
2. Criar migrations de banco de dados
3. Desenvolver engine de recomenda√ß√£o
4. Implementar componentes React
5. Adicionar sistema de analytics

---
üöÄ **MatchIt Recommendation System** - Transformando conex√µes em relacionamentos significativos
"""
        
        # Escrever arquivo
        progress_file_path = self.project_root / ".recommendation-system-progress.md"
        with open(progress_file_path, 'w', encoding='utf-8') as f:
            f.write(progress_content)
        
        print("‚úÖ Arquivo de progresso criado: .recommendation-system-progress.md")
    
    def print_dependencies_info(self) -> None:
        """Imprime informa√ß√µes sobre depend√™ncias"""
        print()
        print("üì¶ Depend√™ncias que ser√£o necess√°rias:")
        
        for category, deps in self.dependencies.items():
            print(f"{category.title()}:")
            for dep in deps:
                print(f"  - {dep}")
            print()
    
    def print_next_steps(self) -> None:
        """Imprime os pr√≥ximos passos"""
        print("üéâ Setup conclu√≠do! Execute os pr√≥ximos comandos conforme os arquivos forem criados.")
        print()
        print("üìã Pr√≥ximos passos:")
        print("1. Implementar tipos base (Fase 1.1)")
        print("2. Executar migra√ß√µes de banco (Fase 1.2)")
        print("3. Implementar extens√µes de backend (Fase 1.3)")
        print("4. Testar compatibilidade com sistema atual")
        print()
        print("üí° Dica: Acompanhe o progresso no arquivo .recommendation-system-progress.md")
        print()
        print("üîß Para instalar depend√™ncias Python para migrations:")
        print("   pip install psycopg2-binary python-dotenv")
        print()
        print("üöÄ Para executar as migrations (ap√≥s implementar os SQLs):")
        print("   python run_all_migrations.py")
    
    def create_requirements_file(self) -> None:
        """Cria arquivo requirements.txt para depend√™ncias Python"""
        requirements_content = """# Depend√™ncias Python para Sistema de Recomenda√ß√£o MatchIt

# Database
psycopg2-binary>=2.9.0

# Environment variables
python-dotenv>=1.0.0

# Utilities
typing-extensions>=4.0.0

# Development dependencies (opcional)
pytest>=7.0.0
pytest-asyncio>=0.21.0
black>=23.0.0
flake8>=6.0.0
mypy>=1.0.0
"""
        
        requirements_path = self.project_root / "requirements-recommendation.txt"
        with open(requirements_path, 'w', encoding='utf-8') as f:
            f.write(requirements_content)
        
        print("üì¶ Arquivo requirements-recommendation.txt criado para depend√™ncias Python")
    
    def run_setup(self) -> bool:
        """Executa o setup completo"""
        try:
            # Header
            self.print_header()
            
            # Verificar estrutura do projeto
            if not self.check_project_structure():
                return False
            
            # Criar estrutura de diret√≥rios
            self.create_directory_structure()
            
            # Mostrar plano de implementa√ß√£o
            self.print_implementation_plan()
            
            # Criar arquivo de progresso
            self.create_progress_file()
            
            # Criar arquivo de requirements Python
            self.create_requirements_file()
            
            # Mostrar informa√ß√µes sobre depend√™ncias
            self.print_dependencies_info()
            
            # Pr√≥ximos passos
            self.print_next_steps()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante o setup: {e}")
            return False

def main() -> int:
    """Fun√ß√£o principal"""
    setup = RecommendationSystemSetup()
    
    try:
        if setup.run_setup():
            return 0
        else:
            return 1
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Setup cancelado pelo usu√°rio")
        return 1
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
