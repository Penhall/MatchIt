# scripts/diagnostico-erro-interno.sh - Diagnosticar erro interno do sistema

#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

print_header() { echo -e "${CYAN}$1${NC}"; }
print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

# Verificar logs do servidor
verificar_logs_servidor() {
    print_header "üìã VERIFICANDO LOGS DO SERVIDOR"
    
    print_info "Fazendo request de teste para capturar erro..."
    
    # Fazer request que deve falhar para capturar logs
    test_response=$(curl -s -X POST "http://localhost:3000/api/auth/register" \
        -H "Content-Type: application/json" \
        -d '{"email":"diagnostico@test.com","password":"123456","name":"Diagnostico"}' 2>/dev/null)
    
    print_info "Resposta do servidor: $test_response"
    
    # Verificar se h√° logs recentes
    if [ -f "server.log" ]; then
        print_info "√öltimos logs do arquivo server.log:"
        tail -20 server.log
    elif [ -f "logs/server.log" ]; then
        print_info "√öltimos logs do arquivo logs/server.log:"
        tail -20 logs/server.log
    else
        print_warning "Arquivo de log n√£o encontrado"
    fi
    
    echo ""
}

# Testar conex√£o com banco de dados
testar_conexao_banco() {
    print_header "üóÑÔ∏è  TESTANDO CONEX√ÉO COM BANCO DE DADOS"
    
    # Tentar conex√£o direta com psql
    print_info "Testando conex√£o direta com psql..."
    
    export PGPASSWORD="matchit123"
    if psql -h localhost -p 5432 -U matchit -d matchit_db -c "SELECT 'Conexao OK' as status, NOW() as timestamp;" 2>/dev/null; then
        print_success "‚úÖ Conex√£o direta com banco FUNCIONANDO!"
    else
        print_error "‚ùå Falha na conex√£o direta com banco"
        print_info "Detalhes do erro:"
        psql -h localhost -p 5432 -U matchit -d matchit_db -c "SELECT 1;" 2>&1 | head -5
    fi
    unset PGPASSWORD
    
    # Verificar se tabelas existem
    print_info "Verificando se tabela 'users' existe..."
    export PGPASSWORD="matchit123"
    table_exists=$(psql -h localhost -p 5432 -U matchit -d matchit_db -t -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users');" 2>/dev/null)
    
    if echo "$table_exists" | grep -q "t"; then
        print_success "‚úÖ Tabela 'users' existe"
        
        # Verificar estrutura da tabela
        print_info "Estrutura da tabela users:"
        psql -h localhost -p 5432 -U matchit -d matchit_db -c "\d users" 2>/dev/null
    else
        print_error "‚ùå Tabela 'users' n√£o existe"
        print_info "Criando tabela users..."
        psql -h localhost -p 5432 -U matchit -d matchit_db -c "
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            email VARCHAR(255) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            name VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        );" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            print_success "‚úÖ Tabela users criada"
        else
            print_error "‚ùå Falha ao criar tabela users"
        fi
    fi
    unset PGPASSWORD
    
    echo ""
}

# Testar imports dos m√≥dulos ES
testar_imports_es() {
    print_header "üì¶ TESTANDO IMPORTS DOS M√ìDULOS ES"
    
    # Criar script de teste para cada m√≥dulo
    print_info "Testando database.js..."
    cat > test_database.js << 'EOF'
import database from './server/config/database.js';
console.log('‚úÖ Database import OK');
database.testConnection().then(() => {
    console.log('‚úÖ Database connection OK');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå Database connection failed:', error.message);
    process.exit(1);
});
EOF
    
    if node test_database.js 2>/dev/null; then
        print_success "‚úÖ database.js importando e conectando"
    else
        print_error "‚ùå Problema com database.js"
        print_info "Detalhes do erro:"
        node test_database.js 2>&1
    fi
    
    rm -f test_database.js
    
    # Testar middleware
    print_info "Testando auth middleware..."
    cat > test_middleware.js << 'EOF'
import authMiddleware from './server/middleware/auth.js';
console.log('‚úÖ Auth middleware import OK');
console.log('Type:', typeof authMiddleware);
process.exit(0);
EOF
    
    if node test_middleware.js 2>/dev/null; then
        print_success "‚úÖ auth middleware importando"
    else
        print_error "‚ùå Problema com auth middleware"
        print_info "Detalhes do erro:"
        node test_middleware.js 2>&1
    fi
    
    rm -f test_middleware.js
    
    # Testar rotas
    print_info "Testando auth routes..."
    cat > test_routes.js << 'EOF'
import authRoutes from './server/routes/auth.js';
console.log('‚úÖ Auth routes import OK');
console.log('Type:', typeof authRoutes);
console.log('Methods:', Object.getOwnPropertyNames(authRoutes));
process.exit(0);
EOF
    
    if node test_routes.js 2>/dev/null; then
        print_success "‚úÖ auth routes importando"
    else
        print_error "‚ùå Problema com auth routes"
        print_info "Detalhes do erro:"
        node test_routes.js 2>&1
    fi
    
    rm -f test_routes.js
    echo ""
}

# Verificar depend√™ncias npm
verificar_dependencias() {
    print_header "üì¶ VERIFICANDO DEPEND√äNCIAS NPM"
    
    required_deps=("express" "bcrypt" "jsonwebtoken" "pg" "dotenv")
    
    for dep in "${required_deps[@]}"; do
        if [ -d "node_modules/$dep" ]; then
            version=$(cat "node_modules/$dep/package.json" | grep '"version"' | cut -d'"' -f4)
            print_success "$dep@$version instalado"
        else
            print_error "$dep n√£o encontrado"
            print_info "Instalando $dep..."
            npm install "$dep" --save
        fi
    done
    
    echo ""
}

# Testar endpoint espec√≠fico com debug
testar_endpoint_debug() {
    print_header "üîç TESTE DETALHADO DO ENDPOINT /api/auth/register"
    
    print_info "1. Verificando se endpoint existe..."
    status_code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000/api/auth/register")
    
    if [ "$status_code" = "404" ]; then
        print_error "‚ùå Endpoint n√£o existe (404)"
        return
    elif [ "$status_code" = "405" ]; then
        print_warning "‚ö†Ô∏è Endpoint existe mas m√©todo n√£o permitido (405)"
        print_info "Testando GET em vez de POST..."
        curl -s "http://localhost:3000/api/auth/register"
        return
    else
        print_success "‚úÖ Endpoint existe (status: $status_code)"
    fi
    
    print_info "2. Teste com dados m√≠nimos..."
    response=$(curl -s -X POST "http://localhost:3000/api/auth/register" \
        -H "Content-Type: application/json" \
        -d '{"email":"test1@test.com","password":"123456","name":"Test"}')
    
    print_info "Resposta completa: $response"
    
    if echo "$response" | grep -q "INTERNAL_ERROR"; then
        print_error "‚ùå Erro interno detectado"
    elif echo "$response" | grep -q "success.*true"; then
        print_success "‚úÖ Registro funcionou!"
    elif echo "$response" | grep -q "EMAIL_EXISTS"; then
        print_warning "‚ö†Ô∏è Email j√° existe (isso √© normal se testou antes)"
        
        # Tentar com email √∫nico
        unique_email="test_$(date +%s)@test.com"
        print_info "3. Teste com email √∫nico: $unique_email"
        response2=$(curl -s -X POST "http://localhost:3000/api/auth/register" \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"$unique_email\",\"password\":\"123456\",\"name\":\"Test\"}")
        
        print_info "Resposta com email √∫nico: $response2"
    fi
    
    echo ""
}

# Verificar vari√°veis de ambiente
verificar_env_vars() {
    print_header "üîß VERIFICANDO VARI√ÅVEIS DE AMBIENTE"
    
    if [ -f ".env" ]; then
        print_success "‚úÖ Arquivo .env existe"
        
        # Verificar vari√°veis cr√≠ticas
        vars=("DB_HOST" "DB_PORT" "DB_NAME" "DB_USER" "DB_PASSWORD" "JWT_SECRET")
        
        for var in "${vars[@]}"; do
            if grep -q "^$var=" .env; then
                value=$(grep "^$var=" .env | cut -d'=' -f2)
                if [ ${#value} -gt 0 ]; then
                    print_success "$var definido"
                else
                    print_error "$var vazio"
                fi
            else
                print_error "$var n√£o encontrado no .env"
            fi
        done
    else
        print_error "‚ùå Arquivo .env n√£o encontrado"
    fi
    
    echo ""
}

# An√°lise do server/app.js
analisar_app_js() {
    print_header "üîç ANALISANDO SERVER/APP.JS"
    
    if [ -f "server/app.js" ]; then
        # Verificar imports
        if grep -q "import.*auth.*from.*./routes/auth.js" server/app.js; then
            print_success "‚úÖ Import das rotas de auth encontrado"
        else
            print_error "‚ùå Import das rotas de auth n√£o encontrado"
        fi
        
        if grep -q "import.*authMiddleware.*from.*./middleware/auth.js" server/app.js; then
            print_success "‚úÖ Import do middleware de auth encontrado"
        else
            print_error "‚ùå Import do middleware de auth n√£o encontrado"
        fi
        
        if grep -q "import.*database.*from.*./config/database.js" server/app.js; then
            print_success "‚úÖ Import do database encontrado"
        else
            print_error "‚ùå Import do database n√£o encontrado"
        fi
        
        # Verificar uso das rotas
        if grep -q "app.use.*'/api/auth'.*authRoutes" server/app.js; then
            print_success "‚úÖ Uso das rotas de auth encontrado"
        else
            print_error "‚ùå Uso das rotas de auth n√£o encontrado"
        fi
        
    else
        print_error "‚ùå server/app.js n√£o encontrado"
    fi
    
    echo ""
}

# Gerar relat√≥rio com solu√ß√µes
gerar_relatorio_solucoes() {
    print_header "üìä RELAT√ìRIO DE DIAGN√ìSTICO E SOLU√á√ïES"
    
    echo ""
    print_info "üîç PROBLEMAS IDENTIFICADOS E SOLU√á√ïES:"
    
    # Verificar se banco est√° acess√≠vel
    export PGPASSWORD="matchit123"
    if ! psql -h localhost -p 5432 -U matchit -d matchit_db -c "SELECT 1;" &>/dev/null; then
        echo ""
        print_error "üóÑÔ∏è PROBLEMA: Banco de dados inacess√≠vel"
        print_info "SOLU√á√ÉO:"
        echo "  1. Verifique se PostgreSQL est√° rodando:"
        echo "     sudo systemctl status postgresql  # Linux"
        echo "     brew services list | grep postgres  # Mac"
        echo "  2. Verifique credenciais no .env"
        echo "  3. Crie banco se necess√°rio:"
        echo "     createdb -h localhost -U postgres matchit_db"
    fi
    unset PGPASSWORD
    
    # Verificar se m√≥dulos t√™m problemas
    if ! node -e "import('./server/config/database.js')" &>/dev/null; then
        echo ""
        print_error "üì¶ PROBLEMA: M√≥dulo database.js n√£o carrega"
        print_info "SOLU√á√ÉO:"
        echo "  1. Verifique sintaxe: node --check server/config/database.js"
        echo "  2. Verifique depend√™ncias: npm install pg dotenv"
    fi
    
    echo ""
    print_header "üöÄ PR√ìXIMAS A√á√ïES RECOMENDADAS:"
    echo "1. üîß Se banco estiver inacess√≠vel, configure PostgreSQL"
    echo "2. üì¶ Se m√≥dulos n√£o carregam, reinstale depend√™ncias"
    echo "3. üß™ Teste novamente: ./scripts/teste-fase0-detalhado.sh"
    echo "4. üìã Monitore logs do servidor para erros espec√≠ficos"
    
    echo ""
    print_success "‚úÖ DIAGN√ìSTICO CONCLU√çDO!"
}

# Fun√ß√£o principal
main() {
    print_header "üîç DIAGN√ìSTICO COMPLETO DO ERRO INTERNO"
    print_info "Identificando causa raiz do erro interno no sistema"
    echo ""
    
    verificar_env_vars
    verificar_dependencias
    testar_conexao_banco
    testar_imports_es
    analisar_app_js
    testar_endpoint_debug
    verificar_logs_servidor
    gerar_relatorio_solucoes
}

# Executar
main "$@"