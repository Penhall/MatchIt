@echo off
REM windows-fix-3000.bat - Corre√ß√£o espec√≠fica para Windows

echo üîß CORRE√á√ÉO WINDOWS - BACKEND PORTA 3000
echo =========================================
echo.

REM Verificar se estamos no diret√≥rio correto
if not exist package.json (
    echo ‚ùå Execute este script no diret√≥rio raiz do projeto MatchIt
    pause
    exit /b 1
)

echo ‚úÖ Diret√≥rio correto identificado
echo üéØ Configurando backend para porta 3000...
echo.

REM Parar processos Node existentes
echo üîß Parando processos Node.js existentes...
taskkill /F /IM node.exe >nul 2>&1
if errorlevel 1 (
    echo    Nenhum processo Node encontrado
) else (
    echo    ‚úÖ Processos Node parados
)
echo.

REM Instalar cross-env se necess√°rio
echo üì¶ Verificando depend√™ncias...
npm list cross-env >nul 2>&1
if errorlevel 1 (
    echo    Instalando cross-env...
    npm install cross-env --save-dev
    echo    ‚úÖ cross-env instalado
) else (
    echo    ‚úÖ cross-env j√° instalado
)
echo.

REM Executar corre√ß√£o JavaScript
echo üîß Executando corre√ß√µes de configura√ß√£o...
node -e "
const fs = require('fs');

// 1. Corrigir .env
console.log('üìù Corrigindo .env...');
const envContent = `NODE_ENV=development
PORT=3000
API_BASE_URL=http://localhost:3000/api
FRONTEND_URL=http://localhost:5173
CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://127.0.0.1:5173
DB_HOST=localhost
DB_PORT=5432
DB_NAME=matchit_db
DB_USER=matchit
DB_PASSWORD=matchit123
JWT_SECRET=matchit_secret_key_development_2024
JWT_EXPIRES_IN=7d
REDIS_URL=redis://localhost:6379
MAX_FILE_SIZE=5242880
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=10000
LOG_LEVEL=debug`;

if (fs.existsSync('.env')) {
    fs.copyFileSync('.env', '.env.backup.' + Date.now());
}
fs.writeFileSync('.env', envContent);
console.log('‚úÖ .env configurado');

// 2. Corrigir package.json
console.log('üìù Corrigindo package.json...');
const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
fs.writeFileSync('package.json.backup.' + Date.now(), JSON.stringify(pkg, null, 2));

pkg.scripts = pkg.scripts || {};
pkg.scripts.server = 'cross-env PORT=3000 node server/app.js';
pkg.scripts.backend = 'cross-env PORT=3000 node server/app.js';
pkg.scripts.health = 'node -e \"require(\\\"http\\\").get(\\\"http://localhost:3000/api/health\\\", r => r.on(\\\"data\\\", d => console.log(d.toString())))\"';
pkg.scripts.dev = 'vite';
pkg.scripts.frontend = 'vite';

fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
console.log('‚úÖ package.json corrigido');

// 3. Criar teste
console.log('üìù Criando teste...');
const testScript = `const http = require('http');
console.log('üß™ Testando porta 3000...');
const req = http.get('http://localhost:3000/api/health', (res) => {
  let data = '';
  res.on('data', chunk => data += chunk);
  res.on('end', () => {
    console.log('‚úÖ Backend OK na porta 3000');
    console.log('üìÑ', data);
  });
}).on('error', (err) => {
  console.log('‚ùå Backend n√£o responde na porta 3000');
  console.log('üîß Execute: npm run server');
});`;

fs.writeFileSync('test-3000.js', testScript);
console.log('‚úÖ Teste criado');
"

echo.
echo ‚úÖ Configura√ß√µes corrigidas!
echo.

REM Criar script de inicializa√ß√£o
echo üìù Criando script de inicializa√ß√£o...
echo @echo off > start-backend-3000.bat
echo echo üöÄ Iniciando Backend MatchIt - Porta 3000 >> start-backend-3000.bat
echo echo ======================================== >> start-backend-3000.bat
echo echo. >> start-backend-3000.bat
echo echo üîß Parando processos anteriores... >> start-backend-3000.bat
echo taskkill /F /IM node.exe ^>nul 2^>^&1 >> start-backend-3000.bat
echo echo. >> start-backend-3000.bat
echo echo üöÄ Iniciando backend na porta 3000... >> start-backend-3000.bat
echo echo    URL: http://localhost:3000 >> start-backend-3000.bat
echo echo    Health: http://localhost:3000/api/health >> start-backend-3000.bat
echo echo. >> start-backend-3000.bat
echo set PORT=3000 >> start-backend-3000.bat
echo npm run server >> start-backend-3000.bat
echo pause >> start-backend-3000.bat

echo ‚úÖ Script start-backend-3000.bat criado
echo.

REM Testar configura√ß√£o atual
echo üß™ Testando se h√° algum servidor rodando...
node -e "
const http = require('http');
console.log('üîç Verificando porta 3000...');
http.get('http://localhost:3000/api/health', (res) => {
  console.log('‚úÖ Backend j√° est√° rodando na porta 3000!');
}).on('error', () => {
  console.log('‚ÑπÔ∏è  Nenhum servidor na porta 3000 (normal)');
});

console.log('üîç Verificando porta 3001...');
http.get('http://localhost:3001/api/health', (res) => {
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Servidor ainda rodando na porta 3001');
  console.log('üîß Pare o processo e use start-backend-3000.bat');
}).on('error', () => {
  console.log('‚úÖ Porta 3001 livre (correto)');
});
" 2>nul

echo.
echo ================================================================
echo  CORRE√á√ÉO CONCLU√çDA - WINDOWS
echo ================================================================
echo.
echo üìù ARQUIVOS CRIADOS/MODIFICADOS:
echo    ‚úÖ .env - Configurado para porta 3000
echo    ‚úÖ package.json - Scripts corrigidos
echo    ‚úÖ start-backend-3000.bat - Script de inicializa√ß√£o
echo    ‚úÖ test-3000.js - Teste de conectividade
echo.
echo üöÄ PR√ìXIMOS PASSOS:
echo.
echo    1. INICIAR BACKEND:
echo       start-backend-3000.bat
echo.
echo    2. TESTAR BACKEND (em outro prompt):
echo       node test-3000.js
echo.
echo    3. INICIAR FRONTEND (em outro prompt):
echo       npm run dev
echo.
echo üéØ URLs CORRETAS:
echo    Backend:  http://localhost:3000
echo    Frontend: http://localhost:5173
echo    API:      http://localhost:3000/api/health
echo.
echo ‚úÖ Configura√ß√£o para Windows conclu√≠da!
echo.
echo üí° DICA: Use start-backend-3000.bat para iniciar sempre na porta 3000
echo.
pause
