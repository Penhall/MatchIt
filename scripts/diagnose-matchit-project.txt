#!/bin/bash
# scripts/diagnose-matchit-project.sh - Script completo de diagnóstico do projeto MatchIt

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Contadores
found_files=0
missing_files=0
critical_missing=0
typescript_errors=0
suggestions=()
backup_suggestions=()

# Função para procurar arquivos na pasta backup
find_in_backup() {
    local target_file=$1
    local filename=$(basename "$target_file")
    
    # Procurar em backup/ e subpastas
    if [[ -d "backup" ]]; then
        # Procura exata pelo nome do arquivo
        local exact_match=$(find backup -name "$filename" -type f 2>/dev/null | head -1)
        if [[ -n "$exact_match" ]]; then
            echo "$exact_match"
            return 0
        fi
        
        # Se não encontrar exato, procura por padrões similares
        local pattern_match=$(find backup -name "*${filename%.*}*" -type f 2>/dev/null | head -1)
        if [[ -n "$pattern_match" ]]; then
            echo "$pattern_match"
            return 0
        fi
    fi
    
    return 1
}

# Função para verificar sintaxe TypeScript
check_typescript_syntax() {
    local file=$1
    if command -v npx &> /dev/null && [[ -f "tsconfig.json" ]]; then
        local errors=$(npx tsc --noEmit "$file" 2>&1 | grep -c "error")
        if [[ $errors -gt 0 ]]; then
            typescript_errors=$((typescript_errors + 1))
            echo "      ⚠️  $errors erro(s) TypeScript detectado(s)"
        fi
    fi
}

# Função para verificar arquivos
check_file() {
    local file=$1
    local description=$2
    local is_critical=${3:-false}
    
    if [[ -f "$file" ]]; then
        found_files=$((found_files + 1))
        echo "    ✅ $description: $file"
        if [[ "$file" == *.tsx ]] || [[ "$file" == *.ts ]]; then
            check_typescript_syntax "$file"
        fi
        return 0
    else
        # Procurar na pasta backup
        local backup_file=$(find_in_backup "$file")
        if [[ -n "$backup_file" ]]; then
            found_files=$((found_files + 1))
            echo "    🔄 $description: $file (ENCONTRADO EM BACKUP: $backup_file)"
            backup_suggestions+=("cp '$backup_file' '$file'")
            return 0
        else
            missing_files=$((missing_files + 1))
            if [[ "$is_critical" == "true" ]]; then
                echo "    ❌ $description: $file (CRÍTICO - não encontrado nem em backup)"
                critical_missing=$((critical_missing + 1))
            else
                echo "    ⚠️  $description: $file (não encontrado nem em backup)"
            fi
            
            # Adicionar à lista de sugestões
            suggestions+=("Criar: $file")
            return 1
        fi
    fi
}

# Função para verificar dependências
check_dependency() {
    local package=$1
    local description=$2
    
    if [[ -f "package.json" ]] && grep -q "\"$package\"" package.json; then
        echo "    ✅ $description: $package"
        return 0
    else
        echo "    ❌ $description: $package"
        suggestions+=("npm install $package")
        return 1
    fi
}

# Função para verificar diretórios
check_directory() {
    local dir=$1
    local description=$2
    
    if [[ -d "$dir" ]]; then
        echo "    ✅ $description: $dir/"
        return 0
    else
        echo "    ❌ $description: $dir/"
        suggestions+=("mkdir -p $dir")
        return 1
    fi
}

# Início do diagnóstico
clear
echo -e "${CYAN}🔍 DIAGNÓSTICO COMPLETO DO PROJETO MATCHIT${NC}"
echo "============================================="
echo "📅 Data: $(date)"
echo "📂 Diretório: $(pwd)"

# Verificar pasta backup
if [[ -d "backup" ]]; then
    backup_files=$(find backup -type f | wc -l)
    echo -e "${GREEN}🔄 Pasta backup encontrada com $backup_files arquivos${NC}"
else
    echo -e "${YELLOW}⚠️  Pasta backup não encontrada${NC}"
fi

echo ""

# 1. Verificação de Estrutura Base
echo -e "${BLUE}📁 Verificando Estrutura Base:${NC}"
check_file "package.json" "Configuração do Projeto" true
check_file "tsconfig.json" "Configuração TypeScript" true
check_file "vite.config.ts" "Configuração Vite"
check_file "index.html" "HTML Principal" true

echo ""

# 2. Verificação de Diretórios
echo -e "${BLUE}📂 Verificando Diretórios:${NC}"
check_directory "src" "Código Fonte"
check_directory "src/components" "Componentes"
check_directory "src/hooks" "Hooks Customizados"
check_directory "src/types" "Definições de Tipos"
check_directory "src/utils" "Utilitários"
check_directory "server" "Servidor Backend"

echo ""

# 3. Verificação de Arquivos Principais
echo -e "${BLUE}🚀 Verificando Arquivos Principais:${NC}"
check_file "src/main.tsx" "Entrada Principal" true
check_file "src/App.tsx" "Componente Principal" true
check_file "src/App.css" "CSS Principal"

# Procurar App.tsx em locais alternativos se não encontrado
if [[ ! -f "src/App.tsx" ]]; then
    for alt_path in "App.tsx" "src/components/App.tsx" "components/App.tsx"; do
        if [[ -f "$alt_path" ]]; then
            echo "    🔄 App.tsx encontrado em: $alt_path"
            suggestions+=("mv '$alt_path' 'src/App.tsx'")
            break
        fi
    done
fi

echo ""

# 4. Verificação de Hooks
echo -e "${BLUE}🪝 Verificando Hooks Customizados:${NC}"
check_file "src/hooks/useAuth.ts" "Hook de Autenticação" true
check_file "src/hooks/useApi.ts" "Hook de API" true
check_file "src/hooks/useTournament.ts" "Hook de Torneio" true

echo ""

# 5. Verificação de Internacionalização
echo -e "${BLUE}🌍 Verificando Internacionalização:${NC}"
check_file "src/i18n.ts" "Configuração i18n" true
check_file "src/locales/pt-BR.json" "Traduções PT-BR" true
check_file "src/locales/en-US.json" "Traduções EN-US"

echo ""

# 6. Verificação de Telas/Componentes
echo -e "${BLUE}🖥️  Verificando Telas/Componentes:${NC}"
check_file "src/components/TournamentScreen.tsx" "Tela de Torneio" true
check_file "src/components/TournamentScreen.css" "CSS da Tela de Torneio"
check_file "src/components/AdminTournamentPanel.tsx" "Painel Admin" true
check_file "src/components/AdminTournamentPanel.css" "CSS do Painel Admin"

# Verificar outros componentes que podem existir
for component in "LoginScreen.tsx" "UserProfile.tsx" "MatchDetails.tsx" "TeamManagement.tsx"; do
    if [[ -f "src/components/$component" ]] || [[ -n "$(find_in_backup "src/components/$component")" ]]; then
        check_file "src/components/$component" "Componente $component"
    fi
done

echo ""

# 7. Verificação de Tipos TypeScript
echo -e "${BLUE}📝 Verificando Tipos TypeScript:${NC}"
check_file "src/types/index.ts" "Definições de Tipos" true
check_file "src/types/tournament.ts" "Tipos de Torneio"
check_file "src/types/user.ts" "Tipos de Usuário"

echo ""

# 8. Verificação de Dependências
echo -e "${BLUE}📦 Verificando Dependências:${NC}"
if [[ -f "package.json" ]]; then
    check_dependency "react" "React"
    check_dependency "react-dom" "React DOM"
    check_dependency "react-router-dom" "React Router"
    check_dependency "typescript" "TypeScript"
    check_dependency "vite" "Vite"
    check_dependency "i18next" "i18next"
    check_dependency "react-i18next" "React i18next"
else
    echo "    ❌ package.json não encontrado - não é possível verificar dependências"
fi

echo ""

# 9. Verificação de Backend
echo -e "${BLUE}⚙️  Verificando Backend:${NC}"
check_file "server/index.js" "Servidor Principal"
check_file "server/package.json" "Configuração do Servidor"
check_file "server/routes/tournaments.js" "Rotas de Torneios"
check_file "server/routes/auth.js" "Rotas de Autenticação"

echo ""

# Estatísticas finais
echo -e "${PURPLE}📊 ESTATÍSTICAS FINAIS:${NC}"
echo "   ✅ Arquivos encontrados: $found_files"
echo "   ❌ Arquivos faltando: $missing_files"
echo "   🚨 Arquivos críticos faltando: $critical_missing"
echo "   ⚠️  Erros TypeScript: $typescript_errors"

# Gerar relatório
report_file="diagnostic_report_$(date +%Y%m%d_%H%M%S).txt"
echo ""
echo -e "${GREEN}📄 Gerando relatório: $report_file${NC}"

{
    echo "🔍 RELATÓRIO DE DIAGNÓSTICO - PROJETO MATCHIT"
    echo "============================================="
    echo "📅 Data: $(date)"
    echo "📂 Diretório: $(pwd)"
    echo ""
    
    echo "📊 ESTATÍSTICAS:"
    echo "   ✅ Arquivos encontrados: $found_files"
    echo "   ❌ Arquivos faltando: $missing_files"
    echo "   🚨 Arquivos críticos faltando: $critical_missing"
    echo "   ⚠️  Erros TypeScript: $typescript_errors"
    echo ""
    
    echo "📦 ANÁLISE DO BACKUP:"
    if [[ -d "backup" ]]; then
        echo "   📂 Pasta backup encontrada"
        echo "   📊 Total de arquivos: $(find backup -type f | wc -l)"
        echo ""
        echo "   🔍 Arquivos TypeScript/React encontrados no backup:"
        find backup -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" | while read file; do
            echo "      - $file"
        done
        echo ""
        echo "   🎨 Arquivos CSS encontrados no backup:"
        find backup -name "*.css" -o -name "*.scss" | while read file; do
            echo "      - $file"
        done
    else
        echo "   ❌ Pasta backup não encontrada"
    fi
    
    echo ""
    
    # Sugestões de correção
    echo "🔧 SUGESTÕES DE CORREÇÃO:"
    if [[ ${#suggestions[@]} -gt 0 ]]; then
        for suggestion in "${suggestions[@]}"; do
            echo "   - $suggestion"
        done
    else
        echo "   ✅ Nenhuma correção necessária!"
    fi
    
    # Comandos para restaurar do backup
    if [[ ${#backup_suggestions[@]} -gt 0 ]]; then
        echo ""
        echo "🔄 COMANDOS PARA RESTAURAR DO BACKUP:"
        for cmd in "${backup_suggestions[@]}"; do
            echo "   $cmd"
        done
        echo ""
        echo "💡 Execute todos os comandos de uma vez:"
        echo "   $(IFS=$'\n'; echo "${backup_suggestions[*]}" | tr '\n' ' && ')"
    fi
    
    echo ""
    echo "🚀 PRÓXIMOS PASSOS:"
    echo "   1. Execute os comandos de backup listados acima"
    echo "   2. Instale as dependências faltantes"
    echo "   3. Crie os arquivos que não foram encontrados"
    echo "   4. Execute 'npm run dev' para testar o projeto"
    
} > "$report_file"

echo -e "${GREEN}✅ Diagnóstico completo! Verifique o arquivo: $report_file${NC}"
echo ""
echo -e "${CYAN}🚀 PRÓXIMOS PASSOS:${NC}"
echo "   1. Abra o relatório: cat $report_file"
echo "   2. Execute os comandos de restauração do backup"
echo "   3. Instale dependências: npm install"
echo "   4. Teste o projeto: npm run dev"

# Se há comandos de backup, mostrar eles aqui também
if [[ ${#backup_suggestions[@]} -gt 0 ]]; then
    echo ""
    echo -e "${YELLOW}🔄 COMANDOS PRONTOS PARA RESTAURAR DO BACKUP:${NC}"
    for cmd in "${backup_suggestions[@]}"; do
        echo "   $cmd"
    done
fi