#!/bin/bash
# verify-fix.sh - Script de Verifica√ß√£o MatchIt
# Executa testes para verificar se as corre√ß√µes funcionaram

echo "üîç MatchIt - Verifica√ß√£o P√≥s-Corre√ß√£o"
echo "====================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar status
check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1 - OK${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 - FALHOU${NC}"
        return 1
    fi
}

echo ""
echo -e "${BLUE}üê≥ 1. Verificando containers Docker...${NC}"

# Verificar se docker-compose est√° funcionando
docker-compose --version > /dev/null 2>&1
check_status "Docker Compose instalado"

# Verificar containers em execu√ß√£o
CONTAINERS=$(docker-compose ps --quiet)
if [ ! -z "$CONTAINERS" ]; then
    echo -e "${GREEN}‚úÖ Containers em execu√ß√£o:${NC}"
    docker-compose ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
else
    echo -e "${RED}‚ùå Nenhum container em execu√ß√£o${NC}"
    echo -e "${YELLOW}üí° Execute: docker-compose up --build${NC}"
fi

echo ""
echo -e "${BLUE}üîå 2. Verificando conectividade...${NC}"

# Verificar se porta 3000 est√° acess√≠vel
timeout 5 bash -c "</dev/tcp/localhost/3000" > /dev/null 2>&1
check_status "Porta 3000 acess√≠vel"

# Verificar se porta 80 est√° acess√≠vel (frontend)
timeout 5 bash -c "</dev/tcp/localhost/80" > /dev/null 2>&1
check_status "Porta 80 acess√≠vel (Frontend)"

echo ""
echo -e "${BLUE}üè• 3. Testando Health Check...${NC}"

# Health check do backend
HEALTH_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/api/health -o /tmp/health.json 2>/dev/null || echo "000")

if [ "$HEALTH_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Health Check - OK${NC}"
    
    # Exibir informa√ß√µes de sa√∫de
    if [ -f /tmp/health.json ]; then
        STATUS=$(jq -r '.status // "unknown"' /tmp/health.json 2>/dev/null)
        DB_STATUS=$(jq -r '.database.status // "unknown"' /tmp/health.json 2>/dev/null)
        UPTIME=$(jq -r '.uptime // "unknown"' /tmp/health.json 2>/dev/null)
        
        echo -e "   ${GREEN}üìä Status: $STATUS${NC}"
        echo -e "   ${GREEN}üîå Database: $DB_STATUS${NC}"
        echo -e "   ${GREEN}‚è±Ô∏è Uptime: $UPTIME${NC}"
    fi
else
    echo -e "${RED}‚ùå Health Check - FALHOU (HTTP: $HEALTH_RESPONSE)${NC}"
fi

echo ""
echo -e "${BLUE}üì° 4. Testando endpoints da API...${NC}"

# Testar endpoint de info
INFO_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:3000/api/info -o /tmp/info.json 2>/dev/null || echo "000")

if [ "$INFO_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ API Info - OK${NC}"
    
    if [ -f /tmp/info.json ]; then
        API_NAME=$(jq -r '.name // "unknown"' /tmp/info.json 2>/dev/null)
        API_VERSION=$(jq -r '.version // "unknown"' /tmp/info.json 2>/dev/null)
        API_ENV=$(jq -r '.environment // "unknown"' /tmp/info.json 2>/dev/null)
        
        echo -e "   ${GREEN}üì¶ API: $API_NAME v$API_VERSION${NC}"
        echo -e "   ${GREEN}üåç Environment: $API_ENV${NC}"
    fi
else
    echo -e "${RED}‚ùå API Info - FALHOU (HTTP: $INFO_RESPONSE)${NC}"
fi

echo ""
echo -e "${BLUE}üóÑÔ∏è 5. Verificando banco de dados...${NC}"

# Verificar se PostgreSQL est√° acess√≠vel
PG_CHECK=$(docker-compose exec -T postgres pg_isready -U matchit 2>/dev/null)
if [[ $PG_CHECK == *"accepting connections"* ]]; then
    echo -e "${GREEN}‚úÖ PostgreSQL - OK${NC}"
    
    # Verificar tabelas principais
    TABLES=$(docker-compose exec -T postgres psql -U matchit -d matchit_db -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | tr -d ' ')
    
    if [ "$TABLES" -gt 0 ]; then
        echo -e "   ${GREEN}üìä Tabelas encontradas: $TABLES${NC}"
    else
        echo -e "   ${YELLOW}‚ö†Ô∏è Nenhuma tabela encontrada (normal se for primeira execu√ß√£o)${NC}"
    fi
else
    echo -e "${RED}‚ùå PostgreSQL - FALHOU${NC}"
fi

echo ""
echo -e "${BLUE}üåê 6. Verificando frontend...${NC}"

# Verificar se frontend est√° acess√≠vel
FRONTEND_RESPONSE=$(curl -s -w "%{http_code}" http://localhost -o /dev/null 2>/dev/null || echo "000")

if [ "$FRONTEND_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Frontend - OK${NC}"
    echo -e "   ${GREEN}üîó Acesse: http://localhost${NC}"
else
    echo -e "${RED}‚ùå Frontend - FALHOU (HTTP: $FRONTEND_RESPONSE)${NC}"
fi

echo ""
echo -e "${BLUE}üìù 7. Verificando logs recentes...${NC}"

# Verificar se h√° erros nos logs
ERROR_COUNT=$(docker-compose logs backend --tail=50 2>/dev/null | grep -i error | wc -l)

if [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Sem erros nos logs recentes${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è $ERROR_COUNT erros encontrados nos logs${NC}"
    echo -e "${YELLOW}üí° Execute: docker-compose logs backend | grep -i error${NC}"
fi

echo ""
echo -e "${BLUE}üìä RESUMO FINAL${NC}"
echo "============="

# URLs de acesso
echo -e "${GREEN}üåê URLs de Acesso:${NC}"
echo "   Frontend: http://localhost"
echo "   Backend API: http://localhost:3000/api"
echo "   Health Check: http://localhost:3000/api/health"
echo "   API Info: http://localhost:3000/api/info"

echo ""
echo -e "${GREEN}üõ†Ô∏è Comandos √öteis:${NC}"
echo "   Ver logs: docker-compose logs -f backend"
echo "   Restart: docker-compose restart backend"
echo "   Rebuild: docker-compose up --build"
echo "   Parar: docker-compose down"

echo ""
if [ "$HEALTH_RESPONSE" = "200" ] && [ "$FRONTEND_RESPONSE" = "200" ]; then
    echo -e "${GREEN}üéâ VERIFICA√á√ÉO CONCLU√çDA - SISTEMA FUNCIONANDO!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è VERIFICA√á√ÉO CONCLU√çDA - ALGUNS PROBLEMAS ENCONTRADOS${NC}"
    echo -e "${YELLOW}üí° Consulte as instru√ß√µes acima para resolver${NC}"
fi

# Limpeza
rm -f /tmp/health.json /tmp/info.json

echo ""