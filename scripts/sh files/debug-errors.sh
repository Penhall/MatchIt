#!/bin/bash
# debug-errors.sh - Diagnostica problemas de setError + API 400

echo "üîç MatchIt - Diagn√≥stico de Erros"
echo "================================="
echo ""
echo "‚ùå Problema 1: setError is not defined"
echo "‚ùå Problema 2: HTTP 400 em /api/auth/register"
echo ""

# Problema 1: Procurar todas as ocorr√™ncias de setError
echo "üîç 1. PROCURANDO TODAS AS OCORR√äNCIAS DE setError:"
echo "------------------------------------------------"

if [ -f "screens/LoginScreen.tsx" ]; then
    echo "üìÑ Em LoginScreen.tsx:"
    grep -n "setError" screens/LoginScreen.tsx || echo "   ‚úÖ Nenhuma ocorr√™ncia encontrada"
else
    echo "‚ùå LoginScreen.tsx n√£o encontrado"
fi

echo ""
echo "üìÑ Em todos os arquivos .tsx:"
find . -name "*.tsx" -exec grep -l "setError" {} \; 2>/dev/null | while read file; do
    echo "   üìÅ $file:"
    grep -n "setError" "$file"
done

# Problema 2: Verificar logs do backend para o erro 400
echo ""
echo "üîç 2. VERIFICANDO LOGS DO BACKEND (√∫ltimas 20 linhas):"
echo "----------------------------------------------------"
docker-compose logs --tail=20 backend

echo ""
echo "üîç 3. TESTANDO API MANUALMENTE:"
echo "------------------------------"

# Testar se a API est√° acess√≠vel
echo "üì° Testando conectividade com backend..."
if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
    echo "‚úÖ Backend acess√≠vel"
    
    echo ""
    echo "üìã Testando endpoint de registro com dados v√°lidos..."
    RESPONSE=$(curl -s -w "%{http_code}" -X POST http://localhost:3000/api/auth/register \
        -H "Content-Type: application/json" \
        -d '{"email":"test@example.com","password":"123456","name":"Test User"}' \
        -o /tmp/register_response.json 2>/dev/null)
    
    echo "üìä Status HTTP: $RESPONSE"
    
    if [ -f /tmp/register_response.json ]; then
        echo "üìã Resposta do servidor:"
        cat /tmp/register_response.json
        echo ""
    fi
    
    rm -f /tmp/register_response.json
    
else
    echo "‚ùå Backend n√£o acess√≠vel"
fi

echo ""
echo "üîç 4. VERIFICANDO ESTRUTURA DO BANCO DE DADOS:"
echo "--------------------------------------------"

# Verificar se as tabelas existem
echo "üìä Verificando tabelas no PostgreSQL..."
docker-compose exec -T postgres psql -U matchit -d matchit_db -c "\dt" 2>/dev/null || echo "‚ùå Erro ao acessar banco"

echo ""
echo "üîç 5. VERIFICANDO PAYLOAD DA REQUISI√á√ÉO:"
echo "---------------------------------------"

echo "üí° Para debugar, abra o Developer Tools do navegador:"
echo "   1. F12 -> Network tab"
echo "   2. Tente cadastrar novamente"
echo "   3. Clique na requisi√ß√£o /api/auth/register"
echo "   4. Veja o payload enviado e resposta recebida"

echo ""
echo "üéØ POSS√çVEIS CAUSAS E SOLU√á√ïES:"
echo "==============================="

echo ""
echo "üî¥ Problema 1 - setError:"
echo "  Causa: Frontend ainda tem c√≥digo antigo em cache"
echo "  Solu√ß√£o: docker-compose build --no-cache frontend"

echo ""
echo "üî¥ Problema 2 - HTTP 400:"
echo "  Poss√≠veis causas:"
echo "    - Campos obrigat√≥rios faltando (email, password, name)"
echo "    - Formato de email inv√°lido"
echo "    - Senha muito curta"
echo "    - Tabelas do banco n√£o existem"
echo "    - Problema no server.js"

echo ""
echo "üõ†Ô∏è PR√ìXIMOS PASSOS RECOMENDADOS:"
echo "1. docker-compose build --no-cache frontend"
echo "2. docker-compose restart"
echo "3. Verificar logs: docker-compose logs backend"
echo "4. Testar com dados simples: test@test.com / 123456 / Test"